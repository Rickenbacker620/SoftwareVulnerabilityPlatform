from django.conf import settings
from rest_framework import generics, status
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework import viewsets

from ..models import Project
from ..permissions import IsInProjectReadOnlyOrAdmin, IsStaff
from ..serializers.project import ProjectSerializer


class ProjectViewSet(viewsets.ModelViewSet):
    serializer_class = ProjectSerializer
    queryset = Project.objects.all()
    pagination_class = None

    # def get_queryset(self):
    #     return Project.objects.all()

    def perform_create(self, serializer):
        serializer.save(users=[self.request.user])

# class ProjectList(generics.ListCreateAPIView):
#     # serializer_class = ProjectPolymorphicSerializer
#     serializer_class = ProjectSerializer
#     pagination_class = None
#     queryset = Project.objects.all()

#     def get_permissions(self):
#         # if self.request.method == 'GET':
#         #     self.permission_classes = [IsAuthenticated, ]
#         # else:
#         #     self.permission_classes = [IsAuthenticated & IsStaff]
#         return super().get_permissions()

#     def get_queryset(self):
#         return Project.objects.all()

#     def perform_create(self, serializer):
#         serializer.save(users=[self.request.user])

#     def delete(self, request, *args, **kwargs):
#         delete_ids = request.data['ids']
#         projects = Project.objects.filter(
#             role_mappings__user=self.request.user,
#             role_mappings__role__name=settings.ROLE_PROJECT_ADMIN,
#             pk__in=delete_ids
#         )
#         for project in projects:
#             project.delete()
#         return Response(status=status.HTTP_204_NO_CONTENT)


# class ProjectDetail(generics.RetrieveUpdateDestroyAPIView):
#     queryset = Project.objects.all()
#     serializer_class = ProjectSerializer
#     lookup_url_kwarg = 'project_id'
#     permission_classes = [IsAuthenticated & IsInProjectReadOnlyOrAdmin]
