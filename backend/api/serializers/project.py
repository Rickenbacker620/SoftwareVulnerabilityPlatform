from auto_labeling_pipeline.models import RequestModelFactory
from django.conf import settings
from django.contrib.auth import get_user_model
from django.shortcuts import get_object_or_404
from rest_framework import serializers
from ..models.project import *
from ..models.role import RoleMapping


class ProjectSerializer(serializers.ModelSerializer):
    current_users_role = serializers.SerializerMethodField()

    def get_current_users_role(self, instance):
        role_abstractor = {
            "is_project_admin": settings.ROLE_PROJECT_ADMIN,
            "is_annotator": settings.ROLE_ANNOTATOR,
            "is_annotation_approver": settings.ROLE_ANNOTATION_APPROVER,
        }
        queryset = RoleMapping.objects.values("role_id__name")
        if queryset:
            users_role = get_object_or_404(
                queryset, project=instance.id, user=self.context.get("request").user.id
            )
            for key, val in role_abstractor.items():
                role_abstractor[key] = users_role["role_id__name"] == val
        return role_abstractor

    class Meta:
        model = Project
        fields = (
            'id',
            'name',
            'description',
            'guideline',
            'users',
            'current_users_role',
            'project_type',
            'updated_at',
            'random_order',
            'collaborative_annotation',
            # 'single_class_classification',
            # 'tags'
        )
        read_only_fields = (
            'updated_at',
            'users',
            'current_users_role',
            'tags'
        )


class ExampleSerializer(serializers.ModelSerializer):
    # annotations = serializers.SerializerMethodField()
    # annotation_approver = serializers.SerializerMethodField()
    # is_confirmed = serializers.SerializerMethodField()

    # def get_annotations(self, instance):
    #     request = self.context.get('request')
    #     project = instance.project
    #     model = project.get_annotation_class()
    #     serializer = get_annotation_serializer(task=project.project_type)
    #     annotations = model.objects.filter(example=instance.id)
    #     if request and not project.collaborative_annotation:
    #         annotations = annotations.filter(user=request.user)
    #     serializer = serializer(annotations, many=True)
    #     return serializer.data

    # @classmethod
    # def get_annotation_approver(cls, instance):
    #     approver = instance.annotations_approved_by
    #     return approver.username if approver else None

    # def get_is_confirmed(self, instance):
    #     return instance.states.count() > 0

    class Meta:
        model = Example
        fields = [
            'id',
            'filename',
            # 'annotations',
            'meta',
            # 'annotation_approver',
            # 'comment_count',
            'text',
            # 'is_confirmed'
        ]
        read_only_fields = ['filename',
                            # 'is_confirmed'
                            ]


class CommentSerializer(serializers.ModelSerializer):

    class Meta:
        model = Comment
        fields = ('id', 'user', 'username', 'example', 'text', 'created_at', )
        read_only_fields = ('user', 'example')
