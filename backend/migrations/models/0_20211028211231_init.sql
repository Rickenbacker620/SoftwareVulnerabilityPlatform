-- upgrade --
CREATE TABLE IF NOT EXISTS "cveinfo" (
    "id" VARCHAR(32) NOT NULL  PRIMARY KEY,
    "cve_no" VARCHAR(64) NOT NULL,
    "description" TEXT NOT NULL,
    "publisheddate" TIMESTAMP NOT NULL,
    "lastmodified" TIMESTAMP NOT NULL,
    "cvss3_score" VARCHAR(16) NOT NULL,
    "cvss3_type" VARCHAR(16) NOT NULL,
    "cvss2_score" VARCHAR(16) NOT NULL,
    "cvss2_type" VARCHAR(16) NOT NULL,
    "source_link_list" TEXT NOT NULL,
    "github_link_lisk" TEXT NOT NULL,
    "cpe_dlist" TEXT NOT NULL
);
CREATE TABLE IF NOT EXISTS "partcategory" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    "text" VARCHAR(100) NOT NULL
);
CREATE TABLE IF NOT EXISTS "detailcategory" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    "text" VARCHAR(100) NOT NULL,
    "part_id" INT REFERENCES "partcategory" ("id") ON DELETE SET NULL
);
CREATE TABLE IF NOT EXISTS "project" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    "created_at" TIMESTAMP   DEFAULT CURRENT_TIMESTAMP,
    "modified_at" TIMESTAMP   DEFAULT CURRENT_TIMESTAMP,
    "name" VARCHAR(100) NOT NULL,
    "description" TEXT NOT NULL
);
CREATE TABLE IF NOT EXISTS "role" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    "name" VARCHAR(100) NOT NULL UNIQUE,
    "description" TEXT NOT NULL
);
CREATE TABLE IF NOT EXISTS "user" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    "username" VARCHAR(20) NOT NULL UNIQUE,
    "password_hash" VARCHAR(128),
    "created_at" TIMESTAMP NOT NULL  DEFAULT CURRENT_TIMESTAMP,
    "modified_at" TIMESTAMP NOT NULL  DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE IF NOT EXISTS "dataset" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    "created_at" TIMESTAMP   DEFAULT CURRENT_TIMESTAMP,
    "modified_at" TIMESTAMP   DEFAULT CURRENT_TIMESTAMP,
    "annotations_approved_by_id" INT REFERENCES "user" ("id") ON DELETE SET NULL,
    "project_id" INT NOT NULL REFERENCES "project" ("id") ON DELETE CASCADE,
    "cve_id" VARCHAR(32) NOT NULL UNIQUE REFERENCES "cveinfo" ("id") ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "annotation" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    "start_offset" INT NOT NULL,
    "end_offset" INT NOT NULL,
    "dataset_id" INT NOT NULL REFERENCES "dataset" ("id") ON DELETE CASCADE,
    "detail_id" INT REFERENCES "detailcategory" ("id") ON DELETE SET NULL,
    "part_id" INT NOT NULL REFERENCES "partcategory" ("id") ON DELETE CASCADE,
    "user_id" INT NOT NULL REFERENCES "user" ("id") ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "annotationtask" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    "created_at" TIMESTAMP   DEFAULT CURRENT_TIMESTAMP,
    "modified_at" TIMESTAMP   DEFAULT CURRENT_TIMESTAMP,
    "name" VARCHAR(30) NOT NULL,
    "done" INT NOT NULL  DEFAULT 0,
    "dataset_id" INT REFERENCES "dataset" ("id") ON DELETE SET NULL,
    "user_id" INT REFERENCES "user" ("id") ON DELETE SET NULL
);
CREATE TABLE IF NOT EXISTS "rolemapping" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    "project_id" INT NOT NULL REFERENCES "project" ("id") ON DELETE CASCADE,
    "role_id" INT NOT NULL REFERENCES "role" ("id") ON DELETE CASCADE,
    "user_id" INT NOT NULL REFERENCES "user" ("id") ON DELETE CASCADE,
    CONSTRAINT "uid_rolemapping_user_id_740469" UNIQUE ("user_id", "project_id")
);
CREATE TABLE IF NOT EXISTS "aerich" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    "version" VARCHAR(255) NOT NULL,
    "app" VARCHAR(20) NOT NULL,
    "content" JSON NOT NULL
);
CREATE TABLE IF NOT EXISTS "RoleMapping" (
    "project_id" INT NOT NULL REFERENCES "project" ("id") ON DELETE CASCADE,
    "user_id" INT NOT NULL REFERENCES "user" ("id") ON DELETE CASCADE
);
