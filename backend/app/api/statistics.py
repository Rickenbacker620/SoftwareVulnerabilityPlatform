
from fastapi import APIRouter

router = APIRouter()


# @router.get(
#     "/vulnleave",
#     response_model=list[VulnleaveSchema]
# )
# async def vulnleave(db: Database = Depends(get_db)):
#     collection = db["datasets"]
#     result = collection.aggregate([
#         {"$group": {"_id": "$cvss2_type", "count": {"$sum": 1}}},
#         {"$project": {"_id": False, "cvss2_type": "$_id", "count": True}}
#     ])
#     return list(result)


# @router.get(
#     "/high-risk",
#     response_model=list[HighRiskSchema]
# )
# async def highrisk(db: Database = Depends(get_db)):
#     collection = db["datasets"]
#     cvss3_result = list(collection.aggregate([
#         {"$match": {"cvss3_type": {"$in": ["HIGH", "CRITICAL"]}}},
#         {"$group": {"_id": {"$year": "$published_date"}, "count": {"$sum": 1}}}
#     ]))

#     cvss2_result = list(collection.aggregate([
#         {"$match": {"cvss2_type": "HIGH"}},
#         {"$group": {"_id": {"$year": "$published_date"}, "count": {"$sum": 1}}}
#     ]))
#     result_lst = [{"year": year, "cvss3": 0, "cvss2": 0}
#                   for year in range(1988, datetime.now().year+1)]
#     for final in result_lst:
#         for raw in cvss3_result:
#             if final["year"] == raw["_id"]:
#                 final["cvss3"] = raw["count"]
#         for raw in cvss2_result:
#             if final["year"] == raw["_id"]:
#                 final["cvss2"] = raw["count"]
#     return result_lst


# @router.get(
#     "/vulcount",
#     response_model=list[VulCountSchema]
# )
# async def vulcount(db: Database = Depends(get_db)):
#     collection = db["datasets"]
#     known_list = list(collection.aggregate([
#         {"$match": {"cwe_id": {
#             "$not": {"$in": ["NVD-CWE-noinfo", "NVE-CWE-Other"]}}}},
#         {"$group": {"_id": {"$year": "$published_date"}, "count": {"$sum": 1}}},
#     ]))
#     unknown_list = list(collection.aggregate([
#         {"$match": {"cwe_id": {"$in": ["NVD-CWE-noinfo", "NVE-CWE-Other"]}}},
#         {"$group": {"_id": {"$year": "$published_date"}, "count": {"$sum": 1}}},
#     ]))
#     result_lst = [{"year": year, "known": 0, "unknown": 0}
#                   for year in range(1988, datetime.now().year+1)]
#     for final in result_lst:
#         for raw in known_list:
#             if final["year"] == raw["_id"]:
#                 final["known"] = raw["count"]
#         for raw in unknown_list:
#             if final["year"] == raw["_id"]:
#                 final["unknown"] = raw["count"]
#     return result_lst


# @router.get(
#     "/cwerank",
#     response_model=list[CWERankSchema]
# )
# async def cwerank(db: Database = Depends(get_db)):
#     collection = db["datasets"]
#     cwe_grouped = list(collection.aggregate([
#         {"$group": {"_id": "$cwe_id", "count": {"$sum": 1}}},
#         {"$project": {"_id": False, "cwe_id": "$_id", "count": True}}
#     ]))
#     return cwe_grouped


# @router.get(
#     "/pub_top5",
#     response_model=list[Top5Schema]
# )
# async def pub_top5(db: Database = Depends(get_db)):
#     collection = db["datasets"]
#     result = list(collection.find(projection={"_id": False, "cve_id": "$_id", "cwe_id": True,
#                   "cvss3_type": True, "cvss2_type": True, "date": "$published_date"}).sort("published_date", -1).limit(5))
#     return result


# @router.get(
#     "/update_top5",
#     response_model=list[Top5Schema]
# )
# async def update_top5(db: Database = Depends(get_db)):
#     collection = db["datasets"]
#     result = list(collection.find(projection={"_id": False, "cve_id": "$_id", "cwe_id": True,
#                   "cvss3_type": True, "cvss2_type": True, "date": "$last_modified"}).sort("last_modified", -1).limit(5))
#     return result
