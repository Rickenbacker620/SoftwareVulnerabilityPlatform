from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from jose import jwt
from pydantic import ValidationError
from pymongo.database import Database

from app import schemas
from app.core import utils
from app.core.config import settings
from app.core.db import get_db
from app.schemas.user import UserSchema

oauth2_scheme = OAuth2PasswordBearer(
    tokenUrl=f"{settings.API_V1_STR}/users/login"
)


class PaginationParams:
    def __init__(self, offset: int = 0, limit: int = 20):
        self.offset = offset
        self.limit = limit


async def get_current_user(
        db: Database = Depends(get_db),
        token: str = Depends(oauth2_scheme)
) -> UserSchema:
    try:
        payload = jwt.decode(
            token, settings.SECRET_KEY, algorithms=[utils.ALGORITHM]
        )
        token_data = schemas.TokenPayload(**payload)
    except (jwt.JWTError, ValidationError):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Could not validate credentials",
        )
    user = db["users"].find_one({"username": token_data.sub})
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return UserSchema(**user)


def authenticate_user(username: str, password: str):
    db = get_db()
    user = db["users"].find_one({"username": username})
    if user is None:
        return None
    if not utils.verify_password(password, user["password"]):
        return None
    return user
