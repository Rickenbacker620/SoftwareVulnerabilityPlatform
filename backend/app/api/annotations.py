from datetime import datetime

from app.core.utils import get_current_user
from app.models.annotation import (Annotation, AnnotationInSchema,
                                   AnnotationOutSchema)
from app.models.dataset import Dataset
from app.models.extra import Status
from app.models.user import User
from fastapi import APIRouter, Depends, HTTPException

router = APIRouter()


@router.post(
    "/",
    response_model=AnnotationOutSchema
)
async def create_annotation(user: User = Depends(get_current_user), *, annotation_in: AnnotationInSchema):
    try:
        dataset = await Dataset.get(cve_id=annotation_in.cve_id)
        dataset.modified_at = datetime.now()
        await dataset.save()
    except:
        raise HTTPException(status_code=404, detail="未找到该CVE")
    annotation = await Annotation.create(**annotation_in.dict(), dataset_id=dataset.pk, user_id=user.pk)

    annotations_count = await Annotation.filter(dataset_id=dataset.pk).count()
    if annotations_count != 0:
        tags = dataset.tags.copy()
        tags.append("annotated")
        dataset.tags = tags
    await dataset.save()

    annotation.annotated_by = user.username
    annotation_obj = AnnotationOutSchema.from_orm(annotation)
    return annotation_obj


@router.delete(
    "/{annotation_id}",
    response_model=Status,
)
async def delete_annotation(user: User = Depends(get_current_user), *, annotation_id: int):
    try:
        annotation = await Annotation.get(pk=annotation_id)
        dataset = await Dataset.get(pk=annotation.dataset_id)
        dataset.modified_at = datetime.now()
        await annotation.delete()
        annotations_count = await Annotation.filter(dataset_id=dataset.pk).count()
        if annotations_count == 0:
            tags = dataset.tags.copy()
            tags.remove("annotated")
            dataset.tags = tags
        await dataset.save()
    except:
        raise HTTPException(status_code=404, detail="未找到该CVE")
    return Status(message="删除成功")
