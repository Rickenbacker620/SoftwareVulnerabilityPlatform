from typing import List

from fastapi import APIRouter, Depends, HTTPException
from tortoise.contrib.fastapi import HTTPNotFoundError

from app.models.user import User
from app.schemas.annotation import AnnotationCreateSchema
from app.schemas.extra import Status
from app.api.utils import get_current_user
from app.models import Annotation, PartCategory, DetailCategory
from app.schemas import AnnotationSchema, PartCategorySchema, DetailCategorySchema

router = APIRouter()


@router.post(
    "/",
    response_model=AnnotationSchema
)
async def create_annotation(annotation_in: AnnotationCreateSchema, user=Depends(get_current_user)):
    return await Annotation.create(**annotation_in.dict(exclude_unset=True), user=user)


@router.delete(
    "/{annotation_id}",
    response_model=Status,
    responses={404: {"model": HTTPNotFoundError}}
)
async def delete_annotation(annotation_id: int, user: User = Depends(get_current_user)):
    annotation = await Annotation.get_or_none(id=annotation_id)
    if not annotation:
        raise HTTPException(
            status_code=404, detail=f"Annotation {annotation_id} not found")
    if (await annotation.user.first()).username != user.username:
        raise HTTPException(status_code=404, detail=f"No Permission")
    await annotation.delete()
    return Status(message=f"Deleted annotation {annotation_id}")


@router.get(
    "/part-categories",
    response_model=List[PartCategorySchema]
)
async def get_part_categories():
    return await PartCategory.all()


@router.get(
    "/detail-categories",
    response_model=List[DetailCategorySchema]
)
async def get_detail_categories():
    return await DetailCategory.all()
