from typing import List
from datetime import datetime

from fastapi import APIRouter, Depends, HTTPException
from pymongo.collection import ReturnDocument
from pymongo.database import Database
from tortoise.contrib.fastapi import HTTPNotFoundError

from app.schemas.annotation import AnnotationInSchema
from app.schemas.extra import Status
from app.core.db import get_db

router = APIRouter()


@router.post(
    "/{dataset_id}",
    response_model=Status
)
async def create_annotation(db: Database = Depends(get_db), *, dataset_id: str, annotation_in: AnnotationInSchema):
    collection = db["dataset"]
    annotation_obj = annotation_in.dict()
    result = collection.find_one_and_update({"_id": dataset_id},
                                            {"$addToSet": {"annotation.annotations": annotation_obj},
                                             "$set": {"annotation.modified_at": datetime.now()},
                                             "$set": {"annotation.annotated": True}},
                                            return_document=ReturnDocument.AFTER)
    if result is None:
        raise HTTPException(status_code=404, detail="未找到该CVE")
    return Status(message="创建成功")


@router.delete(
    "/{dataset_id}",
    response_model=Status,
    responses={404: {"model": HTTPNotFoundError}}
)
async def delete_annotation(db: Database = Depends(get_db), *, dataset_id: str, annotation_in: AnnotationInSchema):
    collection = db["dataset"]
    annotation_obj = annotation_in.dict()
    before = collection.find_one({"_id": dataset_id})
    result = collection.find_one_and_update({"_id": dataset_id},
                                            {"$pull": {"annotation.annotations": annotation_obj},
                                             "$set": {"annotation.modified_at": datetime.now()}},
                                            return_document=ReturnDocument.AFTER)
    if len(result["annotation"]["annotations"]) == len(before["annotation"]["annotations"]):
        raise HTTPException(status_code=404, detail="删除失败")

    if len(result["annotation"]["annotations"]) == 0:
        collection.find_one_and_update({"_id": dataset_id},
                                        {"$set": {"annotation.annotated": False}},
                                        return_document=ReturnDocument.AFTER)
    return Status(message="删除成功")
