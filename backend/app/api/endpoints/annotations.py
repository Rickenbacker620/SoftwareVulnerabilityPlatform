from typing import List
from datetime import datetime

from fastapi import APIRouter, Depends, HTTPException
from pymongo.collection import ReturnDocument
from pymongo.database import Database
from tortoise.contrib.fastapi import HTTPNotFoundError

from app.api.utils import get_current_user
from app.models import Annotation, PartCategory, DetailCategory, Dataset
from app.models.user import User
from app.schemas import AnnotationSchema, PartCategorySchema, DetailCategorySchema
from app.schemas.annotation import AnnotationCreateSchema
from app.schemas.extra import Status
from app.core.db import get_db

router = APIRouter()


@router.post(
    "/",
    # response_model=AnnotationSchema
)
async def create_annotation(db: Database = Depends(get_db), *,  annotation_in: AnnotationCreateSchema):
    collection = db["dataset"]
    annotation_obj = annotation_in.dict(exclude={"cve_id", "detail"})
    result = collection.find_one_and_update({"_id": annotation_in.cve_id}, {"$addToSet": {
                                            "annotation.annotations": annotation_obj}}, return_document=ReturnDocument.AFTER)
    if result is None:
        raise HTTPException("未找到该CVE")
    return "创建成功"


@router.delete(
    "/{annotation_id}",
    response_model=Status,
    responses={404: {"model": HTTPNotFoundError}}
)
async def delete_annotation(annotation_id: int, user: User = Depends(get_current_user)):
    annotation = await Annotation.get_or_none(pk=annotation_id)
    if not annotation:
        raise HTTPException(
            status_code=404, detail=f"Annotation {annotation_id} not found")

    dataset = await Dataset.get(cve_id=annotation.cve_id)
    annotations_count = dataset.annotations_count - 1
    await Dataset.filter(cve_id=annotation.cve_id).update(annotations_count=annotations_count, modified_at=datetime.now())

    await annotation.delete()
    return Status(message=f"Deleted annotation {annotation_id}")


@router.get(
    "/part-categories",
    response_model=List[PartCategorySchema]
)
async def get_part_categories():
    return await PartCategory.all()


@router.get(
    "/detail-categories",
    response_model=List[DetailCategorySchema]
)
async def get_detail_categories():
    return await DetailCategory.all()
