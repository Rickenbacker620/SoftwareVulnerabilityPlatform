from datetime import datetime

from app.core.db import get_db
from app.schemas.annotation import AnnotationInSchema
from app.schemas.extra import Status
from fastapi import APIRouter, Depends, HTTPException
from pymongo.collection import ReturnDocument
from pymongo.database import Database

router = APIRouter()


@router.post(
    "/{dataset_id}",
    response_model=Status
)
async def create_annotation(db: Database = Depends(get_db), *, dataset_id: str, annotation_in: AnnotationInSchema):
    collection = db["datasets"]
    annotation_obj = annotation_in.dict(exclude_none=True)
    if annotation_obj.get("detail") is not None:
        result = collection.find_one_and_update(
            {"_id": dataset_id},
            {
                "$set": {"annotation.modified_at": datetime.now(), "annotation.annotations.$[e].detail": annotation_obj["detail"]},
                "$addToSet": {"annotation.tags": "classified"},
            },
            array_filters=[
                {"e.start_offset": annotation_obj["start_offset"],
                 "e.end_offset":annotation_obj["end_offset"],
                 "e.part":annotation_obj["part"]}
            ])
    else:
        result = collection.find_one_and_update(
            {"_id": dataset_id},
            {
                "$addToSet": {"annotation.annotations": annotation_obj, "annotation.tags": "annotated"},
                "$set": {"annotation.modified_at": datetime.now()}
            },
            return_document=ReturnDocument.AFTER)
        if result is None:
            raise HTTPException(status_code=404, detail="未找到该CVE")
    return Status(message="创建成功")


@router.delete(
    "/{dataset_id}",
    response_model=Status,
)
async def delete_annotation(db: Database = Depends(get_db), *, dataset_id: str, annotation_in: AnnotationInSchema):
    collection = db["datasets"]
    annotation_obj = annotation_in.dict(exclude_none=True)
    before = collection.find_one({"_id": dataset_id})
    result = collection.find_one_and_update(
        {"_id": dataset_id},
        {"$pull": {"annotation.annotations": annotation_obj},
         "$set": {"annotation.modified_at": datetime.now()}},
        return_document=ReturnDocument.AFTER)
    if len(result["annotation"]["annotations"]) == len(before["annotation"]["annotations"]):
        raise HTTPException(status_code=404, detail="删除失败")

    if len(result["annotation"]["annotations"]) == 0:
        collection.find_one_and_update({"_id": dataset_id},
                                       {"$pull": {"annotation.tags": "annotated"}},
                                       return_document=ReturnDocument.AFTER)
    return Status(message="删除成功")
