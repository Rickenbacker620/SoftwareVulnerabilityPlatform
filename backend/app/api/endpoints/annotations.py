from typing import List

from fastapi import APIRouter, Depends

from fastapi import APIRouter, Depends

from ..utils import get_current_user
from ...models import Annotation, PartCategory, DetailCategory
from ...schemas import AnnotationSchema, PartCategorySchema, DetailCategorySchema

router = APIRouter()


@router.post(
    "/",
    response_model=AnnotationSchema
)
async def create_annotation(annotation_in: AnnotationSchema, user=Depends(get_current_user)):
    return await Annotation.create(**annotation_in.dict(exclude_unset=True), user=user)


@router.get(
    "/part-categories",
    response_model=List[PartCategorySchema]
)
async def get_part_categories():
    return await PartCategory.all()


@router.get(
    "/detail-categories",
    response_model=List[DetailCategorySchema]
)
async def get_part_categories():
    return await DetailCategory.all()

# @router.get(
#     "/",
#     response_model=List[AnnotationSchema]
# )
# async def get_annotations():
#     return await Project.all()
#
#
# @router.post(
#     "/",
#     response_model=ProjectSchema
# )
# async def create_project(project_in: schemas.ProjectCreateSchema, user=Depends(get_current_user)):
#     project = await Project.create(**project_in.dict())
#     await RoleMapping.create(project=project, user=user, role=await Role.get(name="admin"))
#     return project
#
#
# @router.get(
#     "/{project_id}",
#     response_model=ProjectSchema
# )
# async def get_project(project_id: int):
#     return await Project.get(id=project_id)
#
#
# @router.put(
#     "/{project_id}",
#     response_model=ProjectSchema
# )
# async def get_project(project_id: int, project_in: ProjectInSchema):
#     await Project.filter(id=project_id).update(**project_in.dict(exclude_unset=True))
#     return await Project.get(id=project_id)
#
#
# @router.delete(
#     "/{project_id}",
#     response_model=Status,
#     responses={404: {"model": HTTPNotFoundError}}
# )
# async def delete_project(project_id: int, user=Depends(get_current_user)):
#     project = await Project.get_or_none(id=project_id)
#     if not project:
#         raise HTTPException(status_code=404, detail=f"Project {project_id} not found")
#     rolemapping = await RoleMapping.exists(project=project_id, user=user.id, role__name="admin")
#     if not rolemapping:
#         raise HTTPException(status_code=404, detail=f"No Permission")
#     await project.delete()
#     return Status(message=f"Deleted project {project_id}")
