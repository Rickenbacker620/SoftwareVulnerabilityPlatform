from typing import List

from fastapi import APIRouter, Depends, HTTPException
from tortoise.contrib.fastapi import HTTPNotFoundError

from app import schemas
from app.models.project import Project
from app.models.user import Role, RoleMapping
from ..utils import get_current_user
from ...schemas import ProjectSchema, Status, ProjectInSchema

router = APIRouter()


@router.get(
    "/",
    response_model=List[ProjectSchema]
)
async def get_projects():
    return await Project.all()


@router.post(
    "/",
    response_model=ProjectSchema
)
async def create_project(project_in: schemas.ProjectCreateSchema, user=Depends(get_current_user)):
    project = await Project.create(**project_in.dict())
    await RoleMapping.create(project=project, user=user, role=await Role.get(name="admin"))
    return project


@router.get(
    "/{project_id}",
    response_model=ProjectSchema
)
async def get_project(project_id: int):
    return await Project.get(id=project_id)


@router.put(
    "/{project_id}",
    response_model=ProjectSchema
)
async def get_project(project_id: int, project_in: ProjectInSchema):
    await Project.filter(id=project_id).update(**project_in.dict(exclude_unset=True))
    return await Project.get(id=project_id)


@router.delete(
    "/{project_id}",
    response_model=Status,
    responses={404: {"model": HTTPNotFoundError}}
)
async def delete_project(project_id: int, user=Depends(get_current_user)):
    project = await Project.get_or_none(id=project_id)
    if not project:
        raise HTTPException(status_code=404, detail=f"Project {project_id} not found")
    rolemapping = await RoleMapping.exists(project=project_id, user=user.id, role__name="admin")
    if not rolemapping:
        raise HTTPException(status_code=404, detail=f"No Permission")
    await project.delete()
    return Status(message=f"Deleted project {project_id}")
