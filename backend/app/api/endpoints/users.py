from datetime import timedelta
from typing import List

from fastapi import APIRouter, HTTPException, Depends
from fastapi.security import OAuth2PasswordRequestForm
from tortoise.contrib.fastapi import HTTPNotFoundError

from app.api.utils import authenticate_user, get_current_user
from app.core import utils, config
from app.schemas import User, UserCreateSchema, UserSchema, Status, Token

router = APIRouter()


@router.get("/", response_model=List[UserSchema])
async def get_users():
    return [UserSchema(username=e.username, role=e.role.name) for e in await User.all().prefetch_related("role")]


@router.get("/me", response_model=UserSchema)
async def me(user: UserSchema = Depends(get_current_user)):
    return user


@router.post("/", response_model=UserSchema)
async def create_user(user: UserCreateSchema):
    password_hash = utils.get_password_hash(user.password)
    user_obj = await User.create(**user.dict(exclude_unset=True), password_hash=password_hash)
    return UserSchema.from_orm(user_obj)


@router.post("/login", response_model=Token)
async def login(form_data: OAuth2PasswordRequestForm = Depends()):
    user = authenticate_user(username=form_data.username, password=form_data.password)
    if not user:
        raise HTTPException(
            status_code=400, detail="账号或密码错误")
    access_token_expires = timedelta(
        minutes=config.settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    return {
        "access_token": utils.create_access_token(
            user["username"], expires_delta=access_token_expires
        ),
        "token_type": "bearer",
    }


@router.get("/{user_id}", response_model=UserSchema, responses={404: {"model": HTTPNotFoundError}})
async def get_user(user_id: int):
    user = await User.get(id=user_id).prefetch_related("role")
    return UserSchema(username=user.username,role=user.role.name)


@router.delete("/{user_id}", response_model=Status, responses={404: {"model": HTTPNotFoundError}})
async def delete_user(user_id: int):
    deleted_count = await User.filter(id=user_id).delete()
    if not deleted_count:
        raise HTTPException(
            status_code=404, detail=f"User {user_id} not found")
    return Status(message=f"Deleted user {user_id}")
