from datetime import timedelta

from fastapi import APIRouter, HTTPException, Depends
from fastapi.security import OAuth2PasswordRequestForm

from app.api.utils import authenticate_user, get_current_user
from app.core import utils, config
from app.schemas import UserSchema, Token

router = APIRouter()


@router.get("/me", response_model=UserSchema)
async def me(user: UserSchema = Depends(get_current_user)):
    return user


@router.post("/login", response_model=Token)
async def login(form_data: OAuth2PasswordRequestForm = Depends()):
    user = authenticate_user(username=form_data.username, password=form_data.password)
    if not user:
        raise HTTPException(
            status_code=400, detail="账号或密码错误")
    access_token_expires = timedelta(
        minutes=config.settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    return {
        "access_token": utils.create_access_token(
            user["username"], expires_delta=access_token_expires
        ),
        "token_type": "bearer",
    }
