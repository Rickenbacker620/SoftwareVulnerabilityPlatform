from typing import List

from fastapi import APIRouter, HTTPException
from tortoise.contrib.fastapi import HTTPNotFoundError

from app.core import security
from ...schemas import User, UserCreateSchema, UserSchema, Status

router = APIRouter()


@router.get(
    "/users",
    response_model=List[UserSchema]
)
async def get_users():
    return await UserSchema.from_queryset(User.all())


@router.post(
    "/users",
    response_model=UserSchema
)
async def create_user(user: UserCreateSchema):
    password_hash = security.get_password_hash(user.password)
    user_obj = await User.create(**user.dict(exclude_unset=True), password_hash=password_hash)
    return await UserSchema.from_tortoise_orm(user_obj)


@router.get(
    "/user/{user_id}",
    response_model=UserSchema,
    responses={404: {"model": HTTPNotFoundError}}
)
async def get_user(user_id: int):
    return await UserSchema.from_queryset_single(User.get(id=user_id))


@router.put(
    "/user/{user_id}", response_model=UserSchema, responses={404: {"model": HTTPNotFoundError}}
)
async def update_user(user_id: int, user: UserCreateSchema):
    await User.filter(id=user_id).update(**user.dict(exclude_unset=True))
    return await UserSchema.from_queryset_single(User.get(id=user_id))


@router.delete("/user/{user_id}", response_model=Status, responses={404: {"model": HTTPNotFoundError}})
async def delete_user(user_id: int):
    deleted_count = await User.filter(id=user_id).delete()
    if not deleted_count:
        raise HTTPException(
            status_code=404, detail=f"User {user_id} not found")
    return Status(message=f"Deleted user {user_id}")
