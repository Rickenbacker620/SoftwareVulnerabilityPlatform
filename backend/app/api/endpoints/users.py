from datetime import timedelta

from app.api.utils import authenticate_user, get_current_user
from app.core import config, utils
from app.schemas import Token, UserSchema
from fastapi import APIRouter, Depends, HTTPException
from fastapi.security import OAuth2PasswordRequestForm
from pymongo.database import Database

from app.core.db import get_db

router = APIRouter()


@router.get("/me", response_model=UserSchema)
async def me(user: UserSchema = Depends(get_current_user)):
    return user


@router.post("/login", response_model=Token)
async def login(form_data: OAuth2PasswordRequestForm = Depends()):
    user = authenticate_user(username=form_data.username,
                             password=form_data.password)
    if not user:
        raise HTTPException(
            status_code=400, detail="账号或密码错误")
    access_token_expires = timedelta(
        minutes=config.settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    return {
        "access_token": utils.create_access_token(
            user["username"], expires_delta=access_token_expires
        ),
        "token_type": "bearer",
    }

@router.post("/register")
async def register(db: Database= Depends(get_db),*, username: str, password: str, role: str="annotator"):
    user_collection = db["users"]
    user_collection.insert_one({"username":username, "password": utils.get_password_hash(password), "role":role})
    return "success"

@router.get("/users", response_model=list[str])
async def show_users(db: Database= Depends(get_db)):
    user_collection = db["users"]
    users = user_collection.find(projection={'username': True})
    users = [user["username"] for user in list(users)]
    return users
