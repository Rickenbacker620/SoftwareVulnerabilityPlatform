from typing import List, Optional
import re

from fastapi import APIRouter, Depends
from fastapi import HTTPException
import pymongo
from pymongo.database import Database
from tortoise.functions import Count

from app.api.utils import PaginationParams, get_current_user
from app.models import Dataset, Annotation, User
from app.schemas import DatasetDetailSchema, AnnotationSchema, DatasetSchema, \
    AnnotationTaskCreateSchema, Status
from app.core.db import get_db
from app.schemas.dataset import TaskSchema

router = APIRouter()


@router.get(
    "/",
    response_model=List[DatasetSchema]
)
async def get_datasets(db: Database = Depends(get_db), page: PaginationParams = Depends(),
                       annotated: Optional[bool] = None, ambiguous: Optional[bool] = None,
                       approved: Optional[bool] = None, order:int = 0, q: str = None):

    collection = db["dataset"]


    query_dict = {"annotation": {"$exists": True}}
    if annotated is not None:
        query_dict["annotation.annotated"] = annotated

    if ambiguous is not None:
        query_dict["annotation.ambiguous"] = ambiguous

    if approved is not None:
        query_dict["annotation.approved"] = approved

    if q is not None:
        regex = re.compile(f".*{q}.*")
        query_dict["_id"] = regex

    datasets = collection \
        .find(filter=query_dict) \

    if order == 0:
        datasets = datasets.sort("annotation.modified_at", pymongo.ASCENDING)

    if order == 1:
        datasets = datasets.sort("annotation.modified_at", pymongo.DESCENDING)

    datasets = datasets.skip(page.offset).limit(page.limit)

    return list(datasets)


@router.get(
    "/my-tasks",
    response_model=List[TaskSchema]
)
async def get_my_task(db: Database = Depends(get_db)):
    collection = db["task"]
    tasks = collection.find(projection={"_id":False}).sort([("created_at", pymongo.DESCENDING)])
    tasks = list(tasks)
    for task in tasks:
        for detail in task["detail"]:
            if detail["user"] == "fjh":
                dataset_ids = detail["datasets"]
                datasets = list(db["dataset"].find({"_id": {"$in": dataset_ids}}))
                datasets.sort(key=lambda dataset: dataset["annotation"]["modified_at"], reverse=True)
                datasets.sort(key=lambda dataset: dataset["annotation"]["annotated"])
                task["detail"] = datasets

    return tasks


@router.post(
    "/make-task",
    response_model=Status
)
async def make_task(task: AnnotationTaskCreateSchema):
    users = await User.all()

    datasets = await Dataset.annotate(annotations_count=Count(
        "annotations")).filter(annotations_count=0, task=None).limit(task.size * len(users))

    for idx, annotator in enumerate(users):
        start = idx * task.size
        end = start + task.size
        ds = datasets[start:end]
        await Dataset.bulk_create([
            Dataset(name=task.name, user=annotator, dataset=i) for i in ds
        ])

    return Status(message=f"Created Success {task.name}")


@router.get(
    "/{dataset_id}",
    response_model=DatasetDetailSchema
)
async def get_dataset(db: Database = Depends(get_db), *, dataset_id: str):

    collection = db["dataset"]
    dataset = collection.find_one({"_id": dataset_id})

    if dataset is None:
        raise HTTPException(status_code=404, detail="未找到该CVE")

    return dataset


@router.post(
    "/{dataset_id}/approve",
)
async def mark_as_approved(dataset_id: str):
    await Dataset.filter(cve_id=dataset_id).update(approved=True)
    return Status(message="操作成功")


@router.post(
    "/{dataset_id}/ambiguous",
)
async def mark_as_ambiguous(dataset_id: str):
    await Dataset.filter(cve_id=dataset_id).update(approved=True)
    return Status(message="操作成功")
