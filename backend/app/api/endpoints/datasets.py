from typing import List

from fastapi import APIRouter, Depends, HTTPException
from tortoise.functions import Count
from tortoise.query_utils import Prefetch

from app.api.utils import PaginationParams, get_current_user
from app.models import Dataset, Annotation, User, AnnotationTask
from app.schemas import DatasetDetailSchema, AnnotationSchema, DatasetSchema, \
    AnnotationTaskCreateSchema, Status, AnnotationTaskSchema

router = APIRouter()


@router.get(
    "/",
    response_model=List[DatasetSchema]
)
async def get_datasets(page: PaginationParams = Depends()):
    return await Dataset.all().offset(page.offset).limit(page.limit).prefetch_related("cve")


@router.get(
    "/my-tasks",
    response_model=List[AnnotationTaskSchema]
)
async def get_my_tasks(user: User = Depends(get_current_user)):
    return await AnnotationTask.filter(user=user).prefetch_related(
        Prefetch("dataset", Dataset.all().prefetch_related("cve")))


@router.post(
    "/make-task",
    response_model=Status
)
async def make_task(task: AnnotationTaskCreateSchema):
    users = await User.all()

    datasets = Dataset.annotate(annotations_count=Count("annotations")).filter(annotations_count=0,task=None)


    for idx, annotator in enumerate(users):
        ds = await datasets.offset(idx * task.size).limit(task.size)
        await AnnotationTask.bulk_create([
            AnnotationTask(name=task.name, user=annotator, dataset=i) for i in ds
        ])

    return Status(message=f"Created Success {task.name}")


@router.get(
    "/{dataset_id}",
    response_model=DatasetDetailSchema
)
async def get_dataset(dataset_id: int):
    return await Dataset.get(id=dataset_id).prefetch_related("cve", "annotations_approved_by")


@router.post(
    "/finish-annotation/{dataset_id}",
    response_model=Status
)
async def finish_annotation(dataset_id: int, user=Depends(get_current_user)):
    task = await AnnotationTask.filter(dataset_id=dataset_id, user=user).first()
    if (task is not None):
        task.done = True
        await task.save()
        return Status(message="success")
    else:
        raise HTTPException(status_code=404, detail=f"Cannot finish task")


# @router.get("
#     "/{dataset_id}"

# ")

# @router.put(
#     "/{project_id}"
# )
# async def get_project(project_id: int, project_in: ProjectInSchema):
#     await Project.filter(id=project_id).update(**project_in.dict(exclude_unset=True))
#     return await ProjectInSchema.from_queryset_single(Project.get(id=project_id))


# @router.delete(
#     "/{dataset_id}",
#     response_model=Status,
#     responses={404: {"model": HTTPNotFoundError}}
# )
# async def delete_dataset(dataset_id: int, user=Depends(get_current_user)):
#     project = await Project.get_or_none(id=dataset_id)
#     if not project:
#         raise HTTPException(status_code=404, detail=f"Project {dataset_id} not found")
#     rolemapping = await RoleMapping.exists(project=dataset_id, user=user.id, role__name="admin")
#     if not rolemapping:
#         raise HTTPException(status_code=404, detail=f"No Permission")
#     await project.delete()
#     return Status(message=f"Deleted project {dataset_id}")


@router.get(
    "/{dataset_id}/annotations",
    response_model=List[AnnotationSchema]
)
async def get_dataset_annotations(dataset_id: int):
    return await Annotation.filter(dataset__id=dataset_id)
