from typing import List, Optional

from fastapi import APIRouter, Depends
from fastapi import HTTPException
from pymongo.database import Database
from tortoise.functions import Count

from app.api.utils import PaginationParams, get_current_user
from app.models import Dataset, Annotation, User
from app.schemas import DatasetDetailSchema, AnnotationSchema, DatasetSchema, \
    AnnotationTaskCreateSchema, Status
from app.core.db import get_db

router = APIRouter()


@router.get(
    "/",
    response_model=List[DatasetSchema]
)
async def get_datasets(db: Database = Depends(get_db), page: PaginationParams = Depends(),
                       annotated: Optional[bool] = None, ambiguous: Optional[bool] = None,
                       approved: Optional[bool] = None):

    collection = db["dataset"]

    query_dict = {"annotation": {"$exists": True}}
    if annotated is not None:
        query_dict["annotation.annotated"] = annotated

    if ambiguous is not None:
        query_dict["annotation.ambiguous"] = ambiguous

    if approved is not None:
        query_dict["annotation.approved"] = approved

    datasets = collection \
        .find(filter=query_dict) \
        .skip(page.offset) \
        .limit(page.limit)

    return list(datasets)


@router.get(
    "/my-tasks"
)
async def get_my_task(db: Database = Depends(get_db)):
    collection = db["task"]
    tasks = collection.aggregate([
        {
            '$unwind': {
                'path': '$detail'
            }
        }, {
            '$unwind': {
                'path': '$detail.user'
            }
        }, {
            '$group': {
                '_id': '$detail.user',
                'task': {
                    '$addToSet': {
                        'name': '$name',
                        'datasets': '$detail.datasets'
                    }
                }
            }}
        # }, {
        #     '$project': {
        #         '_id': False
        #     }
        # }
    ])
    print(list(tasks)[0])

    return "hi"


@router.post(
    "/make-task",
    response_model=Status
)
async def make_task(task: AnnotationTaskCreateSchema):
    users = await User.all()

    datasets = await Dataset.annotate(annotations_count=Count(
        "annotations")).filter(annotations_count=0, task=None).limit(task.size * len(users))

    for idx, annotator in enumerate(users):
        start = idx * task.size
        end = start + task.size
        ds = datasets[start:end]
        await Dataset.bulk_create([
            Dataset(name=task.name, user=annotator, dataset=i) for i in ds
        ])

    return Status(message=f"Created Success {task.name}")


@router.get(
    "/{dataset_id}",
    response_model=DatasetDetailSchema
)
async def get_dataset(db: Database = Depends(get_db), *, dataset_id: str):

    collection = db["dataset"]
    dataset = collection.find_one({"_id": dataset_id})

    if dataset is None:
        raise HTTPException(status_code=404, detail="未找到该CVE")

    return dataset


@router.get(
    "/{dataset_id}/annotations",
    response_model=List[AnnotationSchema]
)
async def get_dataset_annotations(dataset_id: str):
    return await Annotation.filter(cve_id=dataset_id)


@router.post(
    "/{dataset_id}/approve",
)
async def mark_as_approved(dataset_id: str):
    await Dataset.filter(cve_id=dataset_id).update(approved=True)
    return Status(message="操作成功")


@router.post(
    "/{dataset_id}/ambiguous",
)
async def mark_as_ambiguous(dataset_id: str):
    await Dataset.filter(cve_id=dataset_id).update(approved=True)
    return Status(message="操作成功")
