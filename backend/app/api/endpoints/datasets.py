from typing import List, Optional

from fastapi import APIRouter, Depends
from tortoise.functions import Count

from app.api.utils import PaginationParams, get_current_user
from app.models import Dataset, Annotation, User
from app.schemas import DatasetDetailSchema, AnnotationSchema, DatasetSchema, \
    AnnotationTaskCreateSchema, Status

router = APIRouter()


@router.get(
    "/",
    response_model=List[DatasetSchema]
)
async def get_datasets(user: User = Depends(get_current_user), page: PaginationParams = Depends(),
                       annotated: Optional[bool] = True, ambiguous: Optional[bool] = None,
                       approved: Optional[bool] = None, my: Optional[bool] = None):
    queryset = Dataset.all()

    if my is True:
        queryset = Dataset.filter(user=user)

    if annotated is not None:
        if annotated is True:
            queryset = queryset.filter(annotations_count__not=0)
        if annotated is False:
            queryset = queryset.filter(annotations_count=0)

    if ambiguous is not None:
        queryset = queryset.filter(ambiguous=ambiguous)

    if approved is not None:
        queryset = queryset.filter(approved=approved)

    queryset = queryset.offset(page.offset).limit(page.limit).order_by("-modified_at").prefetch_related("cve")

    return [DatasetSchema(cve_id=e.pk, approved=e.approved, ambiguous=e.ambiguous, last_modified=e.modified_at,
                          description=e.cve.description, annotated=e.annotated) for e in await queryset]


# @router.get(
#     "/",
#     response_model=List[DatasetSchema]
# )
# async def get_datasets(page: PaginationParams = Depends(), annotated: bool = True):
#     queryset = Dataset.all()
#
#     if annotated is True:
#         queryset = queryset.filter(annotations_count__not=0)
#
#     if annotated is False:
#         queryset = queryset.filter(annotations_count=0)
#
#     queryset = queryset.filter(ambiguous=ambiguous, approved=approved)
#
#     queryset = queryset.offset(page.offset).limit(page.limit).order_by("-modified_at").prefetch_related("cve")
#
#     return [DatasetSchema(cve_id=e.pk, approved=e.approved, ambiguous=e.ambiguous, last_modified=e.modified_at,
#                           description=e.cve.description, annotated=e.annotations_count > 0) for e in await queryset]
#
#
#     queryset = Dataset.filter(user=user)
#
#     if annotated is not None:
#         if annotated is True:
#             queryset = queryset.filter(annotations_count__not=0)
#
#         if annotated is False:
#             queryset = queryset.filter(annotations_count=0)
#
#     queryset = queryset.filter(ambiguous=ambiguous, approved=approved)
#
#     queryset = queryset.offset(page.offset).limit(page.limit).order_by("-modified_at").prefetch_related("cve")
#
#     return [DatasetSchema(cve_id=e.pk, approved=e.approved, ambiguous=e.ambiguous, last_modified=e.modified_at,
#                           description=e.cve.description, annotated=e.annotations_count > 0) for e in await queryset]


# @router.get(
#     "/my-tasks",
#     response_model=List[DatasetSchema]
# )
# async def get_my_tasks(user: User = Depends(get_current_user), page: PaginationParams = Depends(),
#                        annotated: Optional[bool] = None, ambiguous: bool=False, approved:bool=False):
#     queryset = Dataset.filter(user=user)
#
#     if annotated is not None:
#         if annotated is True:
#             queryset = queryset.filter(annotations_count__not=0)
#
#         if annotated is False:
#             queryset = queryset.filter(annotations_count=0)
#
#     queryset = queryset.filter(ambiguous=ambiguous, approved=approved)
#
#     queryset = queryset.offset(page.offset).limit(page.limit).order_by("-modified_at").prefetch_related("cve")
#
#     return [DatasetSchema(cve_id=e.pk, approved=e.approved, ambiguous=e.ambiguous, last_modified=e.modified_at,
#                           description=e.cve.description, annotated=e.annotations_count > 0) for e in await queryset]


@router.post(
    "/make-task",
    response_model=Status
)
async def make_task(task: AnnotationTaskCreateSchema):
    users = await User.all()

    datasets = await Dataset.annotate(annotations_count=Count(
        "annotations")).filter(annotations_count=0, task=None).limit(task.size * len(users))

    for idx, annotator in enumerate(users):
        start = idx * task.size
        end = start + task.size
        ds = datasets[start:end]
        await Dataset.bulk_create([
            Dataset(name=task.name, user=annotator, dataset=i) for i in ds
        ])

    return Status(message=f"Created Success {task.name}")


@router.get(
    "/{dataset_id}",
    response_model=DatasetDetailSchema
)
async def get_dataset(dataset_id: str):
    return await Dataset.get(cve_id=dataset_id).prefetch_related("cve")


@router.get(
    "/{dataset_id}/annotations",
    response_model=List[AnnotationSchema]
)
async def get_dataset_annotations(dataset_id: str):
    return await Annotation.filter(cve_id=dataset_id)


@router.post(
    "/{dataset_id}/approve",
)
async def mark_as_approved(dataset_id: str):
    await Dataset.filter(cve_id=dataset_id).update(approved=True)
    return Status(message="操作成功")


@router.post(
    "/{dataset_id}/ambiguous",
)
async def mark_as_ambiguous(dataset_id: str):
    await Dataset.filter(cve_id=dataset_id).update(approved=True)
    return Status(message="操作成功")
