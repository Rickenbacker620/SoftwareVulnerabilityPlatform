from typing import List

from fastapi import APIRouter, Depends

from app.api.utils import PaginationParams
from app.models import Dataset, Annotation
from app.schemas import DatasetSchema, DatasetDetailSchema, AnnotationSchema

router = APIRouter()


@router.get(
    "/",
    response_model=List[DatasetSchema]
)
async def get_datasets(page: PaginationParams = Depends()):
    return await Dataset.all().offset(page.offset).limit(page.limit).prefetch_related("cve")


# @router.post(
#     "/",
#     response_model=DatasetSchema
# )
# async def create_project(project_in: schemas.ProjectCreateSchema, user=Depends(get_current_user)):
#     project = await Project.create(**project_in.dict())
#     await RoleMapping.create(project=project, user=user, role=await Role.get(name="admin"))
#     return project
# return await DatasetSchema.from_tortoise_orm(project)


@router.get(
    "/{dataset_id}",
    response_model=DatasetDetailSchema
)
async def get_dataset(dataset_id: int):
    return await Dataset.get(id=dataset_id).prefetch_related("cve", "annotations_approved_by")


# @router.put(
#     "/{project_id}"
# )
# async def get_project(project_id: int, project_in: ProjectInSchema):
#     await Project.filter(id=project_id).update(**project_in.dict(exclude_unset=True))
#     return await ProjectInSchema.from_queryset_single(Project.get(id=project_id))


# @router.delete(
#     "/{dataset_id}",
#     response_model=Status,
#     responses={404: {"model": HTTPNotFoundError}}
# )
# async def delete_dataset(dataset_id: int, user=Depends(get_current_user)):
#     project = await Project.get_or_none(id=dataset_id)
#     if not project:
#         raise HTTPException(status_code=404, detail=f"Project {dataset_id} not found")
#     rolemapping = await RoleMapping.exists(project=dataset_id, user=user.id, role__name="admin")
#     if not rolemapping:
#         raise HTTPException(status_code=404, detail=f"No Permission")
#     await project.delete()
#     return Status(message=f"Deleted project {dataset_id}")


@router.get(
    "/{dataset_id}/annotations",
    response_model=List[AnnotationSchema]
)
async def get_dataset_annotations(dataset_id: int):
    return await Annotation.filter(dataset__id=dataset_id)
