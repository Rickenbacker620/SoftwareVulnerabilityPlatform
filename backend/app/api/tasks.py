from itertools import cycle, groupby

from app.core.utils import get_current_user
from app.models.dataset import Dataset, DatasetOverviewSchema
from app.models.extra import Status
from app.models.task import (MyTaskSchema, TaskCreateSchema, TaskDetail,
                             TaskRecord)
from app.models.user import User
from fastapi import APIRouter, Depends, HTTPException

router = APIRouter()


@router.get(
    "/my",
    response_model=list[MyTaskSchema]
)
async def get_my_task(user: User = Depends(get_current_user)):
    task_records = await TaskRecord.filter(user=user).prefetch_related("dataset")
    task_records_sorted = sorted(task_records, key=lambda e: e.task_id)
    tasks_list = []
    for task_id, items in groupby(task_records_sorted, key=lambda e: e.task_id):
        task_detail = await TaskDetail.get(pk=task_id)
        datasets_in_task = [DatasetOverviewSchema.from_orm(
            item.dataset) for item in items]
        datasets_in_task = sorted(
            datasets_in_task, key=lambda e: e.modified_at)
        tasks_list.append(MyTaskSchema(name=task_detail.name, task_type=task_detail.task_type,
                          created_at=task_detail.created_at, detail=datasets_in_task))
    return tasks_list


@router.post(
    "/make",
    response_model=Status
)
async def make_task(task: TaskCreateSchema):
    if task.size % 2 != 0:
        raise HTTPException(status_code=404, detail="任务数量必须为偶数")
    if task.users == [] or task.size == 0:
        raise HTTPException(status_code=404, detail="用户或任务不能为空")
    if len(task.users) == 1:
        raise HTTPException(status_code=404, detail="选择一个及以上用户")
    task_size_total = len(task.users) * task.size // 2
    match task.task_type:
        case "annotate":
            datasets_left = await Dataset.raw(f'''SELECT * FROM "dataset" WHERE NOT ('annotated' = ANY (tags)) AND NOT ('invalid' = ANY (tags)) LIMIT {task_size_total}''')
        case "classify":
            datasets_left = await Dataset.raw(f'''SELECT * FROM "dataset" WHERE ('annotated' = ANY (tags)) AND NOT ('classified' = ANY (tags)) LIMIT {task_size_total}''')
        case _:
            datasets_left = []

    if len(datasets_left) != task_size_total:
        raise HTTPException(
            status_code=404, detail=f"数据集不足(需要分配{task_size_total}条/剩余{len(datasets_left)}条),请重新指定数量")

    try:
        taskdetail = await TaskDetail.create(name=task.name, task_type=task.task_type)
    except:
        raise HTTPException(
            status_code=404, detail=f"任务创建失败(已有同名任务)")

    user_iter = cycle(task.users)

    for i in range(task_size_total):
        next_i = i+1 if i+1 != task_size_total else 0
        task_tuple = datasets_left[i], datasets_left[next_i]
        cur_username = next(user_iter)
        try:
            cur_user = await User.get(username=cur_username)
        except:
            raise HTTPException(
                status_code=404, detail=f"用户{cur_username}不存在")
        await TaskRecord.bulk_create([TaskRecord(user=cur_user, task=taskdetail, dataset=dataset) for dataset in task_tuple])
    return Status(message=f"任务{task.name}创建成功")
