from itertools import groupby
from typing import List

from app.core.utils import get_current_user
from app.models.annotation import Annotation, AnnotationOutSchema
from app.models.dataset import (Dataset,
                                DatasetDetailSchema, DatasetListSchema,
                                DatasetOverviewSchema)
from app.models.task import (TaskCreateSchema, MyTaskSchema)
from app.models.extra import DatasetFilterParam, Status
from app.models.task import TaskDetail, TaskRecord
from app.models.user import User
from fastapi import APIRouter, Depends, HTTPException

router = APIRouter()

@router.get(
    "/my",
    response_model=List[MyTaskSchema]
)
async def get_my_task(user: User = Depends(get_current_user)):
    task_records = await TaskRecord.filter(user=user).prefetch_related("dataset")
    task_records_sorted = sorted(task_records, key=lambda e: e.task_id)
    tasks_list = []
    for task_id, items in groupby(task_records_sorted, key=lambda e: e.task_id):
        task_detail = await TaskDetail.get(pk=task_id)
        datasets_in_task = [DatasetOverviewSchema.from_orm(
            item.dataset) for item in items]
        datasets_in_task = sorted(datasets_in_task, key=lambda e: e.modified_at)
        tasks_list.append(MyTaskSchema(name=task_detail.name, task_type=task_detail.task_type,
                          created_at=task_detail.created_at, detail=datasets_in_task))
    return tasks_list


@router.post(
    "/make",
    response_model=Status
)
async def make_task(task: TaskCreateSchema):
    if task.users == [] or task.size == 0:
        raise HTTPException(status_code=404, detail="用户或任务不能为空")
    task_size_total = len(task.users) * task.size
    match task.task_type:
        case "annotate":
            datasets_left = await Dataset.raw(f'''SELECT * FROM "dataset" WHERE NOT ('annotated' = ANY (tags)) LIMIT {task_size_total}''')
        case "classify":
            datasets_left = await Dataset.raw(f'''SELECT * FROM "dataset" WHERE ('annotated' = ANY (tags)) AND NOT ('classified' = ANY (tags)) LIMIT {task_size_total}''')
        case _:
            datasets_left = []

    if len(datasets_left) != task_size_total:
        raise HTTPException(
            status_code=404, detail=f"数据集不足(需要分配{task_size_total}条/剩余{len(datasets_left)}条),请重新指定数量")

    try:
        taskdetail = await TaskDetail.create(name=task.name, task_type=task.task_type)
    except:
        raise HTTPException(
            status_code=404, detail=f"任务创建失败(已有同名任务)")

    for i in range(0, task_size_total, task.size):
        user_idx = i // task.size
        try:
            useri = await User.get(username=task.users[user_idx])
        except:
            raise HTTPException(
                status_code=404, detail=f"用户{task.users[user_idx]}不存在")
        await TaskRecord.bulk_create([TaskRecord(user=useri, task=taskdetail, dataset=dataset) for dataset in datasets_left[i:i+task.size]])
    return Status(message=f"任务{task.name}创建成功")