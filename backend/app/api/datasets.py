from itertools import groupby
from typing import List

from app.core.utils import get_current_user
from app.models.annotation import Annotation, AnnotationOutSchema
from app.models.dataset import (Dataset,
                                DatasetDetailSchema, DatasetListSchema,
                                DatasetOverviewSchema)
from app.models.task import (TaskCreateSchema, MyTaskSchema)
from app.models.extra import DatasetFilterParam, Status
from app.models.task import TaskDetail, TaskRecord
from app.models.user import User
from fastapi import APIRouter, Depends, HTTPException
from tortoise import Tortoise
from tortoise.expressions import F, Subquery

router = APIRouter()


@router.get(
    "/",
    response_model=DatasetListSchema
)
async def get_datasets(filter: DatasetFilterParam = Depends()):
    def generate_query_part_tags(key, value):
        match value:
            case None:
                return None
            case True:
                return f"('{key}' = ANY (tags))"
            case False:
                return f"NOT ('{key}' = ANY (tags))"
            case _:
                return None

    query_parts_tags = []
    for status in filter.status_dict.items():
        part = generate_query_part_tags(*status)
        if part is not None:
            query_parts_tags.append(part)

    query_part_like = [f"cve_id LIKE '%{filter.q}%'"]

    query_sentence_where = " AND ".join(query_parts_tags+query_part_like)
    query_sentence_where = "WHERE " + \
        query_sentence_where if query_sentence_where != "" else ""

    query_sentence_limits = f"LIMIT {filter.page.limit} OFFSET {filter.page.offset}"

    match filter.order:
        case 0:
            query_sentence_orderby = f'''ORDER BY cve_id DESC'''
        case 1:
            query_sentence_orderby = f'''ORDER BY cve_id ASC'''
        case _:
            query_sentence_orderby = f'''ORDER BY modified_at DESC'''

    query_sentence_final = " ".join(
        ['''SELECT * FROM "dataset"''', query_sentence_where, query_sentence_orderby, query_sentence_limits])
    count_sentence_final = " ".join(
        ['''SELECT COUNT(*) FROM "dataset"''', query_sentence_where])

    datasets = await Dataset.raw(query_sentence_final)

    conn = Tortoise.get_connection("default")
    result = await conn.execute_query(count_sentence_final)
    count = result[1][0]["count"]
    await conn.close()

    return DatasetListSchema(count=count, list=datasets)


@router.get(
    "/{dataset_id}",
    response_model=DatasetDetailSchema
)
async def get_dataset(dataset_id: str):
    try:
        dataset = await Dataset.get(cve_id=dataset_id).prefetch_related("cve")
    except:
        raise HTTPException(status_code=404, detail="未找到该CVE")

    annotations = await Annotation.filter(dataset_id=dataset.pk).annotate(annotated_by=Subquery(User.get(pk=F("user_id")).values("username")))

    annotations_obj = [
        AnnotationOutSchema.from_orm(annotation) for annotation in annotations]

    dataset_detail = DatasetDetailSchema(
        cve_id=dataset.cve_id,
        description=dataset.cve.description,
        cwe_id=dataset.cve.cwe_id,
        cwe_name=dataset.cve.cwe_name,
        tags=dataset.tags,
        annotations=annotations_obj,
        modified_at=dataset.modified_at,
    )

    return dataset_detail


@router.post(
    "/{dataset_id}/status",
    response_model=Status
)
async def toggle_status(dataset_id: str, option: str | None = None):
    if option not in ["invalid", "ambiguous", "approved", "example"]:
        raise HTTPException(status_code=404, detail="无效操作")
    dataset = await Dataset.get(cve_id=dataset_id)
    tags = dataset.tags.copy()
    if option not in tags:
        tags.append(option)
    elif option in tags:
        tags.remove(option)
    else:
        pass
    dataset.tags = tags
    await dataset.save()

    return Status(message="操作成功")
