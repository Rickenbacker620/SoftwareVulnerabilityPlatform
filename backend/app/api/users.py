from datetime import timedelta

from app.core import config, utils
from app.models.extra import TokenSchema
from app.models.user import User, UserSchema
from fastapi import APIRouter, Depends, HTTPException
from fastapi.security import OAuth2PasswordRequestForm

router = APIRouter()


@router.get("/me", response_model=UserSchema)
async def me(user: UserSchema = Depends(utils.get_current_user)):
    return user


@router.post("/login", response_model=TokenSchema)
async def login(form_data: OAuth2PasswordRequestForm = Depends()):
    user = await User.authenticate(username=form_data.username,
                                         password=form_data.password)
    if not user:
        raise HTTPException(
            status_code=400, detail="账号或密码错误")
    access_token_expires = timedelta(
        minutes=config.settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    return {
        "access_token": utils.create_access_token(
            user.username, expires_delta=access_token_expires
        ),
        "token_type": "bearer",
    }


@router.post("/register")
async def register(username: str, password: str, role: str = "annotator"):
    user = await User.create(username=username, password=utils.get_password_hash(password), role=role)
    return "success"


@router.get("/users", response_model=list[str])
async def show_users():
    users = await User.all()
    users = [user.username for user in users]
    return users
