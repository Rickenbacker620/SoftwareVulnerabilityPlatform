
import json
import csv
import logging
import os
import random
import string

import faker
from tortoise import run_async, Tortoise

from app.core.security import get_password_hash
from app.models import *

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

fake = faker.Faker()


def seq(text: str, start=0):
    index = start

    def inner():
        nonlocal index
        temp = text + str(index)
        index += 1
        return temp

    return inner


def get_cve_list():
    cve_list = []
    with open('./app/cveinfo.csv') as f:
        f_csv = csv.DictReader(f)
        fields = f_csv.fieldnames
        index = 0
        for row in f_csv:
            cve = CVEInfo(**row)
            cve_list.append(cve)
    return cve_list


async def init_next() -> None:
    part_list = ["产生原因", "漏洞位置", "发生情境", "涉及版本", "触发者", "触发操作", "漏洞后果"]

    user_dict = {
        "fjh": "fjh293849",
        "yby": "yby321123",
        "lyj": "lyj128374",
        "sqy": "sqy123511",
        "zj": "zj092734",
        "xyc": "password",
        "hlf": "password"
    }

    # create user
    await User.bulk_create(
        [User(username=username, password_hash=get_password_hash(password)) for username, password in user_dict.items()])
    users = await User.all()

    # create roles
    await Role.bulk_create(
        [Role(name=name) for name in ['annotator', 'approver', 'admin']]
    )
    roles = await Role.all()

    await PartCategory.bulk_create([
        PartCategory(text=part) for part in part_list
    ])
    partcats = await PartCategory.all()

    # for partcat in partcats:
    #     await DetailCategory.bulk_create([
    #         DetailCategory(text=detailcatseq(), part=partcat) for _ in range(0, 2)
    #     ])

    # detailcats = await DetailCategory.all()

    # await RoleMapping.bulk_create([
    #     RoleMapping(user=users[0], project=projects[0], role=roles[2])
    # ])


class AnnotationTrans:

    label_list = ["产生原因", "漏洞位置", "发生情境", "涉及版本", "触发者", "触发操作", "漏洞后果"]

    user_list = ["fjh", "yby", "lyj", "sqy", "zj", "xyc", "hlf"]

    def __init__(self, filename: str) -> None:
        username = filename.strip(string.digits)
        self.user_id = self.user_list.index(username)+1

        with open("../others/annotations/" + filename + ".jsonl") as f:
            self.raw = [json.loads(line) for line in f]

    async def insert_annotation(self):
        for annotation in self.raw:
            description = annotation["data"]
            dataset = await Dataset.filter(cve__description=description).first().prefetch_related("cve")
            dataset_id = dataset.pk
            await AnnotationTask.get_or_create(
                name="v1", dataset_id=dataset_id, user_id=self.user_id, done=True)
            labels = [[label[0], label[1], self.label_list.index(
                label[2])+1] for label in annotation["label"]]
            for label in labels:
                anno = await Annotation.get_or_create(
                    user_id=self.user_id, start_offset=label[0], end_offset=label[1], part_id=label[2], dataset_id=dataset_id)
                print(anno)


def get_annotated():
    temparr = []
    path = "../others/annotations/"
    files = os.listdir(path)
    for file in files:
        parse_file(temparr, path, file)
    return temparr


def parse_file(temparr, path, file):
    file = path + file
    with open(file) as f:
        data = [json.loads(line) for line in f]


async def run():
    await Tortoise.init(
        db_url="postgres://postgres:lucifer@47.116.73.52:5432/svp",
        modules={'models': ['app.models']},
    )

    for file in os.listdir("../others/annotations"):
        temp = AnnotationTrans(file[:-6])
        await temp.insert_annotation()


if __name__ == "__main__":
    run_async(run())

    # run_async(run())
    # run_async(find_annotated())
