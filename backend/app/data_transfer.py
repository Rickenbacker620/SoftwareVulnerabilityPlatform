
import json
import csv
import logging
import os
import random

import faker
from tortoise import run_async, Tortoise

from app.core.security import get_password_hash
from app.models import *

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

fake = faker.Faker()


def seq(text: str, start=0):
    index = start

    def inner():
        nonlocal index
        temp = text + str(index)
        index += 1
        return temp

    return inner


def get_cve_list():
    cve_list = []
    with open('./app/cveinfo.csv') as f:
        f_csv = csv.DictReader(f)
        fields = f_csv.fieldnames
        index = 0
        for row in f_csv:
            cve = CVEInfo(**row)
            cve_list.append(cve)
    return cve_list


async def init_next() -> None:
    part_list = ["产生原因", "漏洞位置", "发生情境", "涉及版本", "触发者", "触发操作", "漏洞后果"]

    user_dict = {
        "fjh": "fjh293849",
        "yby": "yby321123",
        "lyj": "lyj128374",
        "sqy": "sqy123511",
        "zj": "zj092734",
        "xyc": "password",
        "hlf": "password"
    }

    # create user
    await User.bulk_create(
        [User(username=username, password_hash=get_password_hash(password)) for username, password in user_dict.items()])
    users = await User.all()

    await Project.create(name="漏洞标注", desription="科创漏洞图谱平台")

    # create roles
    await Role.bulk_create(
        [Role(name=name) for name in ['annotator', 'approver', 'admin']]
    )
    roles = await Role.all()

    # create cves
    await CVEInfo.bulk_create(get_cve_list())
    cves = await CVEInfo.all()

    await Dataset.bulk_create(
        [Dataset(project=await Project.get(id=1), cve=cve) for cve in cves],
    )
    datasets = await Dataset.all()

    await PartCategory.bulk_create([
        PartCategory(text=part) for part in part_list
    ])
    partcats = await PartCategory.all()

    # for partcat in partcats:
    #     await DetailCategory.bulk_create([
    #         DetailCategory(text=detailcatseq(), part=partcat) for _ in range(0, 2)
    #     ])

    # detailcats = await DetailCategory.all()

    # await RoleMapping.bulk_create([
    #     RoleMapping(user=users[0], project=projects[0], role=roles[2])
    # ])


async def find_annotated():
    path = "../others/annotations/"
    files = os.listdir(path)
    for file in files:
        file = path + file
        with open(file) as f:
            data = [json.loads(line) for line in f]
            description = data[0]["data"]
            print(description)
            break


async def run():
    # try:
    #     os.remove(path="./app/db.sqlite3")
    # except FileNotFoundError:
    #     print("Does not exists")

    # await Tortoise.init(
    #     db_url="sqlite://./app/db.sqlite3",
    #     modules={'models': ['app.models']},
    # )
    await Tortoise.init(
        db_url="postgres://postgres:lucifer@localhost:5432/svp",
        modules={'models': ['app.models']},
    )

    await Tortoise.generate_schemas()
    # await find_annotated()
    await init_next()


if __name__ == "__main__":
    run_async(run())
    # run_async(find_annotated())
