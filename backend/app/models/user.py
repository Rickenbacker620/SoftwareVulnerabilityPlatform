from typing import Optional

from tortoise import models, fields

from app.core.security import verify_password


class User(models.Model):
    username = fields.CharField(max_length=20, unique=True)
    password_hash = fields.CharField(max_length=128, null=True)
    created_at = fields.DatetimeField(auto_now_add=True)
    modified_at = fields.DatetimeField(auto_now=True)

    @classmethod
    async def authenticate(cls, *, username: str, password: str) -> Optional["User"]:
        user = await cls.get(username=username)
        if not user:
            return None
        if not verify_password(password, user.password_hash):
            return None
        return user

    class PydanticMeta:
        exclude = ["password_hash"]


class Role(models.Model):
    name = fields.CharField(max_length=100, unique=True)
    description = fields.TextField(default='')


class RoleMapping(models.Model):
    user = fields.ForeignKeyField('models.User', on_delete=fields.CASCADE)
    project = fields.ForeignKeyField(
        'models.Project', on_delete=fields.CASCADE)
    role = fields.ForeignKeyField('models.Role', on_delete=fields.CASCADE)

    class Meta:
        unique_together = ("user", "project")
