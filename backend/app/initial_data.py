import csv
import logging
import os
import random

import faker
from tortoise import run_async, Tortoise

from app.core.security import get_password_hash
from app.models import *

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

fake = faker.Faker()


def seq(text: str, start=0):
    index = start

    def inner():
        nonlocal index
        temp = text + str(index)
        index += 1
        return temp

    return inner


def get_cve_list():
    cve_list = []
    with open('./app/cveinfo.csv') as f:
        f_csv = csv.DictReader(f)
        fields = f_csv.fieldnames
        index = 0
        for row in f_csv:
            if index > 10:
                break
            cve = CVEInfo(**row)
            cve_list.append(cve)
    return cve_list


async def init() -> None:
    userseq = seq('user')
    projectseq = seq('project')
    partcatseq = seq('partcat')
    detailcatseq = seq('detailcat')

    # create user
    await User.bulk_create(
        [User(username=userseq(), password_hash=get_password_hash("password")) for _ in range(0, 3)])
    users = await User.all()

    # create project
    await Project.bulk_create(
        [Project(name=projectseq(), description=fake.text())
         for _ in range(0, 10)]
    )
    projects = await Project.all()

    # create roles
    await Role.bulk_create(
        [Role(name=name) for name in ['annotator', 'approver', 'admin']]
    )
    roles = await Role.all()

    # create cves
    await CVEInfo.bulk_create(get_cve_list())
    cves = await CVEInfo.all()

    await Dataset.bulk_create([
        *[Dataset(project=await Project.get(id=1), cve=cves[i]) for i in range(0, 5)],
        *[Dataset(project=await Project.get(id=2), cve=cves[i]) for i in range(5, 10)]
    ])
    datasets = await Dataset.all()

    await PartCategory.bulk_create([
        PartCategory(text=partcatseq()) for _ in range(0, 5)
    ])
    partcats = await PartCategory.all()

    for partcat in partcats:
        await DetailCategory.bulk_create([
            DetailCategory(text=detailcatseq(), part=partcat) for _ in range(0, 2)
        ])

    detailcats = await DetailCategory.all()

    await RoleMapping.bulk_create([
        RoleMapping(user=users[0], project=projects[0], role=roles[2])
    ])

    async def get_span(ds: Dataset):
        cve: CVEInfo = await ds.cve
        length = len(cve.description)
        return random.sample(range(0, length), 2)

    annotations = []
    idx = 0
    for dataset in datasets:
        idx += 1
        if (idx % 2) == 1:
            continue
        print(idx)
        span = await get_span(dataset)
        span.sort()
        annotation = await Annotation(start_offset=span[0], end_offset=span[1], dataset=dataset,
                                      part=random.choice(partcats),
                                      detail=random.choice(detailcats),
                                      user=random.choice(users)
                                      )
        await dataset.save()
        annotations.append(annotation)
    await Annotation.bulk_create(annotations)

    # await AnnotationTask.bulk_create([
    #     AnnotationTask(name="task1", user=users[0], dataset=datasets[i]) for i in range(0, len(datasets), 2)
    # ])


async def run():
    # try:
    #     os.remove(path="./app/db.sqlite3")
    # except FileNotFoundError:
    #     print("Does not exists")

    # await Tortoise.init(
    #     db_url="sqlite://./app/db.sqlite3",
    #     modules={'models': ['app.models']},
    # )
    await Tortoise.init(
        db_url="postgres://postgres:lucifer@localhost:5432/svp",
        modules={'models': ['app.models']},
    )
    await Tortoise.generate_schemas()
    conn = Tortoise.get_connection("default")
    await conn.db_delete()
    # await init()


if __name__ == "__main__":
    run_async(run())
