from datetime import datetime

from pydantic import BaseModel

class AnnotationSchema(BaseModel):
    start_offset: int
    end_offset: int
    part: str
    detail: str | None


class DatasetDetailSchema(BaseModel):
    def __init__(self, **data):
        annotation = data.get("annotation") or {}
        super().__init__(**data, **annotation, cve_id=data["_id"])

    cve_id: str
    description: str
    cwe_id: str | None
    cwe_name: str | None
    tags: list[str] | None
    annotations: list[AnnotationSchema] | None
    modified_at: datetime | None


class DatasetSchema(BaseModel):
    def __init__(self, **data):
        annotation = data.get("annotation") or {}
        super().__init__(**data, **annotation, cve_id=data["_id"])

    cve_id: str
    tags: list[str] | None
    modified_at: datetime | None


class DatasetListSchema(BaseModel):
    count: int
    list: list[DatasetSchema]


class TaskSchema(BaseModel):
    name: str
    type: str
    created_at: datetime
    detail: list[DatasetSchema]


class AnnotationTaskCreateSchema(BaseModel):
    name: str
    size: int
    type: str
    users: list[str]


class StatsSchema(BaseModel):
    user: str
    annotated: int
    total: int
