from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel

from .extra import ORMModel


class AnnotationSchema(BaseModel):
    start_offset: int
    end_offset: int
    part: str


class DatasetDetailSchema(BaseModel):
    def __init__(self, **data):
        annotation = data.get("annotation") or {}
        super().__init__(**data, **annotation, cve_id=data["_id"])

    cve_id: str
    description: str
    approved: Optional[bool]
    ambiguous: Optional[bool]
    invalid: Optional[bool]
    annotated: Optional[bool]
    example: Optional[bool]
    annotations: Optional[List[AnnotationSchema]]
    modified_at: Optional[datetime]




class DatasetSchema(BaseModel):
    def __init__(self, **data):
        annotation = data.get("annotation") or {}
        super().__init__(**data, **annotation, cve_id=data["_id"])

    cve_id: str
    description: str
    approved: Optional[bool]
    invalid: Optional[bool]
    ambiguous: Optional[bool]
    annotated: Optional[bool]
    example: Optional[bool]
    modified_at: Optional[datetime]


class DatasetListSchema(BaseModel):
    count: int
    list: List[DatasetSchema]

class TaskSchema(BaseModel):
    name: str
    created_at: datetime
    detail: List[DatasetSchema]


class AnnotationTaskSchema(ORMModel):
    name: str
    dataset: DatasetSchema
    done: bool


class AnnotationTaskCreateSchema(ORMModel):
    name: str
    size: int


class StatsSchema(BaseModel):
    user: str
    annotated: int
    total: int
