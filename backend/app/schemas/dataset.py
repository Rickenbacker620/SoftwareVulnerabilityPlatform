from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel

from .extra import ORMModel
from tortoise.contrib.pydantic import pydantic_model_creator

from app.models import Dataset, CVEInfo, User

class AnnotationSchema(BaseModel):
    start_offset: int
    end_offset: int
    part: str

class DatasetDetailSchema(BaseModel):
    def __init__(self, **data):
        annotation = data.get("annotation") or {}
        super().__init__(**data, **annotation,  cve_id=data["_id"])

    cve_id: str
    description: str
    approved: Optional[bool]
    ambiguous: Optional[bool]
    annotated: Optional[bool]
    annotations: Optional[List[AnnotationSchema]]
    modified_at: Optional[datetime]

class DatasetSchema(BaseModel):
    def __init__(self, **data):
        annotation = data.get("annotation") or {}
        super().__init__(**data, **annotation,  cve_id=data["_id"])

    cve_id: str
    description: str
    approved: Optional[bool]
    ambiguous: Optional[bool]
    annotated: Optional[bool]
    modified_at: Optional[datetime]

class TaskSchema(BaseModel):
    name: str
    created_at: datetime



# class DatasetDetailSchema(ORMModel):
#     CVEInfoSchema = pydantic_model_creator(CVEInfo, name="CVEInfoSchema")

#     approved: Optional[bool]
#     ambiguous: Optional[bool]
#     cve: CVEInfoSchema


# DatasetCreateSchema = pydantic_model_creator(Dataset)


class AnnotationTaskSchema(ORMModel):
    name: str
    dataset: DatasetSchema
    done: bool


class AnnotationTaskCreateSchema(ORMModel):
    name: str
    size: int
