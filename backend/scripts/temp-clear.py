from base import *
import spacy
import csv

nlp = spacy.load("en_core_web_sm")

strip_dict = {
    "cause": ["have", "++an information disclosure vulnerability", "had", "has"],
    "location": ["in"],
    "version": ["in"],
    "attacker": ["++attakers", "++an attacker","++a malicious user"],
    "operation": ["++unspecified vectors", "++unknown vectors"],
    "consequence": ["trigger", "cause", "causes", "triggers", "caused"],
    "situation": []
}

black_list = [
"CVE-2013-4263",
"CVE-2015-1340",
"CVE-2017-0377",
"CVE-2015-5283",
"CVE-2011-4285",
"CVE-2016-8860",
"CVE-2016-2537",
"CVE-2020-10790",
"CVE-2019-9162"
]

file = open("temp.txt", "w")
class DatasetStripper(Dataset):
    def locate_substr(self,string, sub):
        new_start = string.find(sub)
        new_end = new_start + len(sub)
        return new_start, new_end


    def strip_punctuations(self):
        for annotation in self.annotations:
            start = annotation.start_offset
            end = annotation.end_offset
            annotation_text: str = self.description[start:end]

            stripped = annotation_text.strip()
            if stripped.endswith((",", ".", ";", ":")) or stripped.startswith((";", ":")):
                stripped = annotation_text.strip(",.;:")

            if len(stripped) != len(annotation_text):
                new_start = self.description.find(stripped)
                new_end = new_start + len(stripped)
                annotation.start_offset = new_start
                annotation.end_offset = new_end
                print(annotation_text, self.cve_id)
                self.save_annotations()

    def strip_dedundant(self):
        if self.cve_id in black_list:
            return

        for annotation in self.annotations:
            start = annotation.start_offset
            end = annotation.end_offset
            part = annotation.part
            annotation_text: str = self.description[start:end]

            # doc = nlp(annotation_text)
            # token = doc[0]
            # if len(stripped) != len(annotation_text):
            #     print(annotation_text, self.cve_id)


            for word in strip_dict[part]:
                if self.cve_id == "CVE-2017-0377" and part == "cause":
                    print(annotation_text)
                stripped_word = word.strip("+")
                if word.startswith("++"):
                    if annotation_text == stripped_word:
                        print(annotation_text)
                        self.annotations.remove(annotation)
                        file.write(self.cve_id + " " + annotation_text + " " + "*****" + "\n")
                        continue

                elif annotation_text.lower().startswith(stripped_word + " "):
                    print(annotation_text)
                    annotation.start_offset += (len(stripped_word) + 1)
                    file.write(self.cve_id + " " + annotation_text + "\n")
                    continue

        # self.save_annotations()


for data in approved_datasets:
    ds = DatasetStripper(data)
    ds.strip_dedundant()
    # ds.strip_punctuations()
# ds0 = approved_datasets[0]
# ds = Dataset(ds0)
# ds["operation"][0].start_offset = 141
# print(ds["operation"][0].start_offset)
# ds.save_annotations()