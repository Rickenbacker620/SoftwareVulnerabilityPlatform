from datetime import datetime
from pymongo import MongoClient
from pydantic import BaseModel

CONNECTION_STRING = "mongodb://localhost"
client = MongoClient(CONNECTION_STRING)
db = client["svp"]

dataset_collection = db["datasets"]

approved_datasets = list(dataset_collection.find({
    "selected": True,
    "annotation.tags": {
        "$all": ["approved"],
        "$nin": ["invalid", "ambiguous"]
    }
}))

class Annotation(BaseModel):
    start_offset: int
    end_offset: int
    part: str
    detail: str | None

    def get_text(self, description):
        return description[self.start_offset: self.end_offset]

    def relocate_text(self, full_description:str, part_description:str):
        text = self.get_text(full_description)
        start = part_description.find(text)
        if start == -1:
            return None, None
        end = start + (self.end_offset - self.start_offset)
        return start, end


class DatasetBase(BaseModel):
    def __init__(self, **data):
        annotation = data.get("annotation") or {}
        super().__init__(**data, **annotation, cve_id=data["_id"])

    def __getitem__(self, k: str) -> list[Annotation]:
        return [annotation for annotation in self.annotations if annotation.part == k]

    cve_id: str
    description: str
    cwe_id: str | None
    cwe_name: str | None
    tags: list[str] | None
    annotations: list[Annotation] | None


class Dataset(DatasetBase):
    _categories = ["cause", "location", "situation",
                   "version", "attacker", "operation", "consequence"]

    _categories_dict = {categorie: {} for categorie in _categories}

    def __init__(self, dataset) -> None:
        super().__init__(**dataset)

    def save_annotations(self):
        dataset_collection.find_one_and_update({"_id": self.cve_id}, {"$set": {"annotation.annotations": self.dict()["annotations"]}})


def find_cve_by_description(description:str):
    def get_pure_string(string: str):
        return ''.join(ch for ch in string if ch.isalnum())
    pure_sub_sentence = get_pure_string(description)
    for dataset in approved_datasets:
        pure_sentence = get_pure_string(dataset["description"])
        if pure_sentence.find(pure_sub_sentence) != -1:
            return dataset["_id"]
    return None
