/* tslint:disable */
/* eslint-disable */
/**
 * Software Vulnerability PlatForm API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AnnotationCreateSchema
 */
export interface AnnotationCreateSchema {
    /**
     * 
     * @type {string}
     * @memberof AnnotationCreateSchema
     */
    'cve_id': string;
    /**
     * 
     * @type {number}
     * @memberof AnnotationCreateSchema
     */
    'start_offset': number;
    /**
     * 
     * @type {number}
     * @memberof AnnotationCreateSchema
     */
    'end_offset': number;
    /**
     * 
     * @type {string}
     * @memberof AnnotationCreateSchema
     */
    'part': string;
    /**
     * 
     * @type {string}
     * @memberof AnnotationCreateSchema
     */
    'detail'?: string;
}
/**
 * 
 * @export
 * @interface AnnotationSchema
 */
export interface AnnotationSchema {
    /**
     * 
     * @type {number}
     * @memberof AnnotationSchema
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof AnnotationSchema
     */
    'start_offset': number;
    /**
     * 
     * @type {number}
     * @memberof AnnotationSchema
     */
    'end_offset': number;
    /**
     * 
     * @type {string}
     * @memberof AnnotationSchema
     */
    'part': string;
    /**
     * 
     * @type {string}
     * @memberof AnnotationSchema
     */
    'detail'?: string;
    /**
     * 
     * @type {string}
     * @memberof AnnotationSchema
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof AnnotationSchema
     */
    'modified_at': string;
    /**
     * 
     * @type {string}
     * @memberof AnnotationSchema
     */
    'annotated_by': string;
}
/**
 * 
 * @export
 * @interface DatasetDetailSchema
 */
export interface DatasetDetailSchema {
    /**
     * 
     * @type {string}
     * @memberof DatasetDetailSchema
     */
    'cve_id': string;
    /**
     * 
     * @type {string}
     * @memberof DatasetDetailSchema
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof DatasetDetailSchema
     */
    'cwe_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DatasetDetailSchema
     */
    'cwe_name'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DatasetDetailSchema
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {Array<AnnotationSchema>}
     * @memberof DatasetDetailSchema
     */
    'annotations'?: Array<AnnotationSchema>;
    /**
     * 
     * @type {string}
     * @memberof DatasetDetailSchema
     */
    'modified_at': string;
}
/**
 * 
 * @export
 * @interface DatasetListSchema
 */
export interface DatasetListSchema {
    /**
     * 
     * @type {number}
     * @memberof DatasetListSchema
     */
    'count': number;
    /**
     * 
     * @type {Array<DatasetOverviewSchema>}
     * @memberof DatasetListSchema
     */
    'list': Array<DatasetOverviewSchema>;
}
/**
 * 
 * @export
 * @interface DatasetOverviewSchema
 */
export interface DatasetOverviewSchema {
    /**
     * 
     * @type {string}
     * @memberof DatasetOverviewSchema
     */
    'cve_id': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DatasetOverviewSchema
     */
    'tags': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof DatasetOverviewSchema
     */
    'modified_at': string;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface Status
 */
export interface Status {
    /**
     * 
     * @type {string}
     * @memberof Status
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface TaskCreateSchema
 */
export interface TaskCreateSchema {
    /**
     * 
     * @type {string}
     * @memberof TaskCreateSchema
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof TaskCreateSchema
     */
    'size': number;
    /**
     * 
     * @type {string}
     * @memberof TaskCreateSchema
     */
    'task_type': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TaskCreateSchema
     */
    'users': Array<string>;
}
/**
 * 
 * @export
 * @interface TaskRecordSchema
 */
export interface TaskRecordSchema {
    /**
     * 
     * @type {string}
     * @memberof TaskRecordSchema
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TaskRecordSchema
     */
    'task_type': string;
    /**
     * 
     * @type {string}
     * @memberof TaskRecordSchema
     */
    'cve_id': string;
    /**
     * 
     * @type {string}
     * @memberof TaskRecordSchema
     */
    'task_created_at': string;
    /**
     * 
     * @type {string}
     * @memberof TaskRecordSchema
     */
    'dataset_modified_at': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TaskRecordSchema
     */
    'tags': Array<string>;
}
/**
 * 
 * @export
 * @interface TokenSchema
 */
export interface TokenSchema {
    /**
     * 
     * @type {string}
     * @memberof TokenSchema
     */
    'access_token': string;
    /**
     * 
     * @type {string}
     * @memberof TokenSchema
     */
    'token_type': string;
}
/**
 * 
 * @export
 * @interface UserSchema
 */
export interface UserSchema {
    /**
     * 
     * @type {string}
     * @memberof UserSchema
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserSchema
     */
    'role': string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string | number>}
     * @memberof ValidationError
     */
    'loc': Array<string | number>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}

/**
 * AnnotationsApi - axios parameter creator
 * @export
 */
export const AnnotationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Annotation
         * @param {AnnotationCreateSchema} annotationCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAnnotation: async (annotationCreateSchema: AnnotationCreateSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'annotationCreateSchema' is not null or undefined
            assertParamExists('createAnnotation', 'annotationCreateSchema', annotationCreateSchema)
            const localVarPath = `/api/v1/annotations/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(annotationCreateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Annotation Detail
         * @param {number} annotationId 
         * @param {string} detail 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAnnotationDetail: async (annotationId: number, detail: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'annotationId' is not null or undefined
            assertParamExists('createAnnotationDetail', 'annotationId', annotationId)
            // verify required parameter 'detail' is not null or undefined
            assertParamExists('createAnnotationDetail', 'detail', detail)
            const localVarPath = `/api/v1/annotations/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (annotationId !== undefined) {
                localVarQueryParameter['annotation_id'] = annotationId;
            }

            if (detail !== undefined) {
                localVarQueryParameter['detail'] = detail;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Annotation
         * @param {number} annotationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAnnotation: async (annotationId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'annotationId' is not null or undefined
            assertParamExists('deleteAnnotation', 'annotationId', annotationId)
            const localVarPath = `/api/v1/annotations/{annotation_id}`
                .replace(`{${"annotation_id"}}`, encodeURIComponent(String(annotationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnnotationsApi - functional programming interface
 * @export
 */
export const AnnotationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AnnotationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Annotation
         * @param {AnnotationCreateSchema} annotationCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAnnotation(annotationCreateSchema: AnnotationCreateSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnotationSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAnnotation(annotationCreateSchema, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Annotation Detail
         * @param {number} annotationId 
         * @param {string} detail 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAnnotationDetail(annotationId: number, detail: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Status>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAnnotationDetail(annotationId, detail, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Annotation
         * @param {number} annotationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAnnotation(annotationId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Status>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAnnotation(annotationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AnnotationsApi - factory interface
 * @export
 */
export const AnnotationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AnnotationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Annotation
         * @param {AnnotationCreateSchema} annotationCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAnnotation(annotationCreateSchema: AnnotationCreateSchema, options?: any): AxiosPromise<AnnotationSchema> {
            return localVarFp.createAnnotation(annotationCreateSchema, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Annotation Detail
         * @param {number} annotationId 
         * @param {string} detail 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAnnotationDetail(annotationId: number, detail: string, options?: any): AxiosPromise<Status> {
            return localVarFp.createAnnotationDetail(annotationId, detail, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Annotation
         * @param {number} annotationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAnnotation(annotationId: number, options?: any): AxiosPromise<Status> {
            return localVarFp.deleteAnnotation(annotationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AnnotationsApi - object-oriented interface
 * @export
 * @class AnnotationsApi
 * @extends {BaseAPI}
 */
export class AnnotationsApi extends BaseAPI {
    /**
     * 
     * @summary Create Annotation
     * @param {AnnotationCreateSchema} annotationCreateSchema 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationsApi
     */
    public createAnnotation(annotationCreateSchema: AnnotationCreateSchema, options?: AxiosRequestConfig) {
        return AnnotationsApiFp(this.configuration).createAnnotation(annotationCreateSchema, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Annotation Detail
     * @param {number} annotationId 
     * @param {string} detail 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationsApi
     */
    public createAnnotationDetail(annotationId: number, detail: string, options?: AxiosRequestConfig) {
        return AnnotationsApiFp(this.configuration).createAnnotationDetail(annotationId, detail, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Annotation
     * @param {number} annotationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationsApi
     */
    public deleteAnnotation(annotationId: number, options?: AxiosRequestConfig) {
        return AnnotationsApiFp(this.configuration).deleteAnnotation(annotationId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DatasetsApi - axios parameter creator
 * @export
 */
export const DatasetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Dataset
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataset: async (datasetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('getDataset', 'datasetId', datasetId)
            const localVarPath = `/api/v1/datasets/{dataset_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Datasets
         * @param {boolean} [annotated] 
         * @param {boolean} [ambiguous] 
         * @param {boolean} [approved] 
         * @param {boolean} [invalid] 
         * @param {boolean} [example] 
         * @param {boolean} [classified] 
         * @param {number} [order] 
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasets: async (annotated?: boolean, ambiguous?: boolean, approved?: boolean, invalid?: boolean, example?: boolean, classified?: boolean, order?: number, q?: string, offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/datasets/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (annotated !== undefined) {
                localVarQueryParameter['annotated'] = annotated;
            }

            if (ambiguous !== undefined) {
                localVarQueryParameter['ambiguous'] = ambiguous;
            }

            if (approved !== undefined) {
                localVarQueryParameter['approved'] = approved;
            }

            if (invalid !== undefined) {
                localVarQueryParameter['invalid'] = invalid;
            }

            if (example !== undefined) {
                localVarQueryParameter['example'] = example;
            }

            if (classified !== undefined) {
                localVarQueryParameter['classified'] = classified;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Mark Invalid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markInvalid: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/datasets/mark-invalid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Toggle Status
         * @param {string} datasetId 
         * @param {string} [option] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toggleStatus: async (datasetId: string, option?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('toggleStatus', 'datasetId', datasetId)
            const localVarPath = `/api/v1/datasets/{dataset_id}/status`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (option !== undefined) {
                localVarQueryParameter['option'] = option;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DatasetsApi - functional programming interface
 * @export
 */
export const DatasetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DatasetsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Dataset
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataset(datasetId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataset(datasetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Datasets
         * @param {boolean} [annotated] 
         * @param {boolean} [ambiguous] 
         * @param {boolean} [approved] 
         * @param {boolean} [invalid] 
         * @param {boolean} [example] 
         * @param {boolean} [classified] 
         * @param {number} [order] 
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDatasets(annotated?: boolean, ambiguous?: boolean, approved?: boolean, invalid?: boolean, example?: boolean, classified?: boolean, order?: number, q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetListSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDatasets(annotated, ambiguous, approved, invalid, example, classified, order, q, offset, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Mark Invalid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markInvalid(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Status>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markInvalid(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Toggle Status
         * @param {string} datasetId 
         * @param {string} [option] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toggleStatus(datasetId: string, option?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Status>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toggleStatus(datasetId, option, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DatasetsApi - factory interface
 * @export
 */
export const DatasetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DatasetsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Dataset
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataset(datasetId: string, options?: any): AxiosPromise<DatasetDetailSchema> {
            return localVarFp.getDataset(datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Datasets
         * @param {boolean} [annotated] 
         * @param {boolean} [ambiguous] 
         * @param {boolean} [approved] 
         * @param {boolean} [invalid] 
         * @param {boolean} [example] 
         * @param {boolean} [classified] 
         * @param {number} [order] 
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasets(annotated?: boolean, ambiguous?: boolean, approved?: boolean, invalid?: boolean, example?: boolean, classified?: boolean, order?: number, q?: string, offset?: number, limit?: number, options?: any): AxiosPromise<DatasetListSchema> {
            return localVarFp.getDatasets(annotated, ambiguous, approved, invalid, example, classified, order, q, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Mark Invalid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markInvalid(options?: any): AxiosPromise<Status> {
            return localVarFp.markInvalid(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Toggle Status
         * @param {string} datasetId 
         * @param {string} [option] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toggleStatus(datasetId: string, option?: string, options?: any): AxiosPromise<Status> {
            return localVarFp.toggleStatus(datasetId, option, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DatasetsApi - object-oriented interface
 * @export
 * @class DatasetsApi
 * @extends {BaseAPI}
 */
export class DatasetsApi extends BaseAPI {
    /**
     * 
     * @summary Get Dataset
     * @param {string} datasetId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public getDataset(datasetId: string, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).getDataset(datasetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Datasets
     * @param {boolean} [annotated] 
     * @param {boolean} [ambiguous] 
     * @param {boolean} [approved] 
     * @param {boolean} [invalid] 
     * @param {boolean} [example] 
     * @param {boolean} [classified] 
     * @param {number} [order] 
     * @param {string} [q] 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public getDatasets(annotated?: boolean, ambiguous?: boolean, approved?: boolean, invalid?: boolean, example?: boolean, classified?: boolean, order?: number, q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).getDatasets(annotated, ambiguous, approved, invalid, example, classified, order, q, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Mark Invalid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public markInvalid(options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).markInvalid(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Toggle Status
     * @param {string} datasetId 
     * @param {string} [option] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public toggleStatus(datasetId: string, option?: string, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).toggleStatus(datasetId, option, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TasksApi - axios parameter creator
 * @export
 */
export const TasksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get All Tasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTasks: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tasks/admin-all-tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get My Task
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyTask: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tasks/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Make Task
         * @param {TaskCreateSchema} taskCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeTask: async (taskCreateSchema: TaskCreateSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskCreateSchema' is not null or undefined
            assertParamExists('makeTask', 'taskCreateSchema', taskCreateSchema)
            const localVarPath = `/api/v1/tasks/make`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(taskCreateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TasksApi - functional programming interface
 * @export
 */
export const TasksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TasksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get All Tasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTasks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaskRecordSchema>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTasks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get My Task
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyTask(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaskRecordSchema>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyTask(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Make Task
         * @param {TaskCreateSchema} taskCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async makeTask(taskCreateSchema: TaskCreateSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Status>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.makeTask(taskCreateSchema, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TasksApi - factory interface
 * @export
 */
export const TasksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TasksApiFp(configuration)
    return {
        /**
         * 
         * @summary Get All Tasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTasks(options?: any): AxiosPromise<Array<TaskRecordSchema>> {
            return localVarFp.getAllTasks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get My Task
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyTask(options?: any): AxiosPromise<Array<TaskRecordSchema>> {
            return localVarFp.getMyTask(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Make Task
         * @param {TaskCreateSchema} taskCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeTask(taskCreateSchema: TaskCreateSchema, options?: any): AxiosPromise<Status> {
            return localVarFp.makeTask(taskCreateSchema, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TasksApi - object-oriented interface
 * @export
 * @class TasksApi
 * @extends {BaseAPI}
 */
export class TasksApi extends BaseAPI {
    /**
     * 
     * @summary Get All Tasks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public getAllTasks(options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).getAllTasks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get My Task
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public getMyTask(options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).getMyTask(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Make Task
     * @param {TaskCreateSchema} taskCreateSchema 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public makeTask(taskCreateSchema: TaskCreateSchema, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).makeTask(taskCreateSchema, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {string} [grantType] 
         * @param {string} [scope] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('login', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('login', 'password', password)
            const localVarPath = `/api/v1/users/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
            if (scope !== undefined) { 
                localVarFormParams.set('scope', scope as any);
            }
    
            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        me: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register
         * @param {string} username 
         * @param {string} password 
         * @param {string} [role] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (username: string, password: string, role?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('register', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('register', 'password', password)
            const localVarPath = `/api/v1/users/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {string} [grantType] 
         * @param {string} [scope] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(username, password, grantType, scope, clientId, clientSecret, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async me(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.me(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Register
         * @param {string} username 
         * @param {string} password 
         * @param {string} [role] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(username: string, password: string, role?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(username, password, role, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Show Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {string} [grantType] 
         * @param {string} [scope] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options?: any): AxiosPromise<TokenSchema> {
            return localVarFp.login(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        me(options?: any): AxiosPromise<UserSchema> {
            return localVarFp.me(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register
         * @param {string} username 
         * @param {string} password 
         * @param {string} [role] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(username: string, password: string, role?: string, options?: any): AxiosPromise<any> {
            return localVarFp.register(username, password, role, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showUsers(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.showUsers(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Login
     * @param {string} username 
     * @param {string} password 
     * @param {string} [grantType] 
     * @param {string} [scope] 
     * @param {string} [clientId] 
     * @param {string} [clientSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public login(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).login(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public me(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).me(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register
     * @param {string} username 
     * @param {string} password 
     * @param {string} [role] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public register(username: string, password: string, role?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).register(username, password, role, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public showUsers(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).showUsers(options).then((request) => request(this.axios, this.basePath));
    }
}


