import { userService } from "@/utils/services"
import { insideFormItem } from "naive-ui/lib/_utils/cssr"
import { defineStore } from "pinia"
import { useRouter } from "vue-router"
import _ from "lodash-es"
import { getTextTokenIdx } from "@/utils/others"

export const useCursorStore = defineStore("cursor", {
    state: () => ({
        index: 0,
        previousIndex: 0,
        mode: "none",
        tokens: [[0, 0]],
    }),
    actions: {
        initialize(text) {
            this.tokens = getTextTokenIdx(text)
            this.index = 0
            this.mode = "none"
        },
        afterAnnotationIndex() {
            if (this.index === this.tokens.length - 1) {
                this.mode = "none"
            } else {
                this.mode = "pending"
                this.move("right")
            }
        },

        saveIndex() {
            this.previousIndex = this.index
        },

        restoreIndex() {
            this.index = this.previousIndex
        },

        hoistCursor() {
            switch (this.mode) {
                case "none":
                    this.mode = "pending"
                    break
                case "pending":
                    this.mode = "select"
                    this.saveIndex()
                default:
                    this.mode = "select"
                    break
            }
        },

        lowerCursor() {
            switch (this.mode) {
                case "select":
                    this.restoreIndex()
                    this.mode = "pending"
                    break
                case "pending":
                    this.mode = "none"
                    this.index = 0
                    break
                default:
                    this.mode = "none"
                    this.index = 0
                    break
            }
        },

        move(direction: "left" | "right", step = 1) {
            const temp = {
                left: this.index - step,
                right: this.index + step,
            }[direction]
            this.index = _.clamp(temp, 0, this.tokens.length - 1)
            console.log("currr\n")
            console.log(this.tokens[this.index])
            console.log(this.tokens[this.tokens.length - 1])
        },
    },

    getters: {
        position: (state) => {
            switch (state.mode) {
                case "none":
                    return state.tokens[0]
                case "pending":
                    return state.tokens[state.index]
                case "select":
                    const [preSelStart, preSelEnd] =
                        state.tokens[state.previousIndex]
                    const [curSelStart, curSelEnd] = state.tokens[state.index]
                    return state.previousIndex < state.index
                        ? [preSelStart, curSelEnd]
                        : [curSelStart, preSelEnd]

                default:
                    return [0, 0]
            }
        },
    },
})
