$(document).ready(function () {
  // 定义svg变量将布局svg1选出来
  var svg = d3.select("#svg1"),
    width = svg.attr("width"),
    height = svg.attr("height");
  var names = ["CVE ID", "CWE ID", "Extracted INFO", "Keys"];
  var labels = [
    "CVE ID",
    "CWE ID",
    "cause",
    "score",
    "consequence",
    "location",
    "happened scenario",
    "version",
    "triggering operation",
    "related issue",
    "commit id",
    "project",
    "publish date",
    "attacker",
    "update date",
    "vulnerability classification",
  ];

  var attributes = [
    "version",
    "location",
    "consequence",
    "happened_scenario",
    "cause",
    "triggering_operation",
    "related_issue",
    "attacker",
  ];

  var miscellaneous = [
    "update_date",
    "publish_date",
    "score",
    "project",
    "vulnerability_classification",
    "commit_id",
  ];

  var colors = [
    "#ca635f",
    "#99CCFF",
    "#FFCC00",
    "#99CC99",
    "#FFCC00",
    "#FFCC00",
    "#FFCC00",
    "#FFCC00",
    "#FFCC00",
    "#FFCC00",
    "#99CC99",
    "#99CC99",
    "#99CC99",
    "#FFCC00",
    "#99CC99",
    "#99CC99",
  ];
  var url = "data/records1000.json";

  // 背景颜色设置 补充CSS样式设置字体布局
  for (var i = 0; i < names.length; i++) {
    $("#indicator").append(
      "<div><span style='background-color:" +
        colors[i] +
        "'></span>" +
        names[i] +
        "</div>"
    );
  }

  var help = [
    "TIPS",
    "1.If there is no visualization of Graph, refresh will appear.",
    "2.Place the mouse on any node, all the nodes related to this node and their relationship will appear",
    "3.Enter a keyword in the search box to display all related nodes of this keyword",
    "4.Extracted INFO: information extracted from unstructured text(CVE summary)",
    "Keys: information from structured text",
    '5.All the information is from "http://cve.mitre.org/"',
  ];
  $("#tips").append("<div><span>" + help[0] + "</span></div>");
  for (var i = 1; i < help.length; i++) {
    $("#tips").append("<div>" + help[i] + "</div>");
  }

  var simulation = d3
    .forceSimulation()
    .force(
      "link",
      d3.forceLink().id((d) => {
        // console.log(d)
        return d.id;
      })
    )
    .force("charge", d3.forceManyBody())
    .force("center", d3.forceCenter(width / 2, height / 2))
    .force("collision", d3.forceCollide(20)); // 碰撞检测
  // 图数据
  var graph;
  let nodes = [];
  let links = []; // 存放节点和关系
  let nodeSet = []; // 存放去重后nodes的id
  //d3.json获取数据
  d3.json(url, function (error, data) {
    if (error) throw error;
    graph = data;
    console.log(graph[0].p);
    for (let item of graph) {
      for (let segment of item.p.segments) {
        // 重新更改data格式
        if (nodeSet.indexOf(segment.start.identity) == -1) {
          nodeSet.push(segment.start.identity);
          nodes.push({
            id: segment.start.identity,
            label: segment.start.labels[0],
            properties: segment.start.properties,
          });
        }
        if (nodeSet.indexOf(segment.end.identity) == -1) {
          nodeSet.push(segment.end.identity);
          nodes.push({
            id: segment.end.identity,
            label: segment.end.labels[0],
            properties: segment.end.properties,
          });
        }
        links.push({
          source: segment.relationship.start,
          target: segment.relationship.end,
          type: segment.relationship.type,
          properties: segment.relationship.properties,
        });
      }
    }
    var countnodes = nodes.length;
    var countlinks = links.length;
    $("#count").append(
      "<div><span>" +
        "There are " +
        countnodes +
        " nodes " +
        "and " +
        countlinks +
        " links in total " +
        "</span></div>"
    );

    var link = svg
      .append("g")
      .attr("class", "links")
      .selectAll("line")
      .data(links)
      .enter()
      .append("line")
      .attr("stroke-width", function (d) {
        // 每次访问links的一项数据
        return 1.5; //所有线宽度均为2
      });

    //边上的文字（实体之间的关系）
    var linktext = svg
      .append("g")
      .attr("class", "linetexts")
      .selectAll("text")
      .data(links)
      .enter()
      .append("text")
      // .attr("font-size", function(d) {
      // 	return 20

      // })
      .style("display", "block")
      .style("color", "red")
      .text(function (d) {
        return d.type;
      });

    var node = svg
      .append("g")
      .attr("class", "nodes")
      .selectAll("circle")
      .data(nodes)
      .enter()
      .append("circle")
      .attr("r", function (d) {
        // 每次访问nodes的一项数据
        // console.log(d)
        let size = 20;
        switch (d.label) {
          case labels[0]:
            break;
          case labels[1]:
            size = 15;
            break;
          case labels[2]:
            size = 13;
            break;
          default:
            size = 13;
            break;
        }
        return size;
      })
      .attr("fill", function (d) {
        for (let i = 0; i < labels.length; i++) {
          if (d.label === labels[i]) return colors[i];
        }
      })
      .attr("stroke", "none")
      .attr("name", function (d) {
        for (var key in d.properties) {
          //console.log(d.properties)
          return d.properties[key];
        }
        //return d.properties.name;
      })
      .attr("id", (d) => d.id)
      .call(
        d3
          .drag()
          .on("start", dragstarted)
          .on("drag", dragged)
          .on("end", dragended)
      );

    //显示所有的文本
    //设置大小、填充颜色、名字、text()设置文本
    //attr("text-anchor", "middle")设置文本居中
    var text = svg
      .append("g")
      .attr("class", "texts")
      .selectAll("text")
      .data(nodes)
      .enter()
      .append("text")
      .attr("font-size", function (d) {
        let size = 20;
        switch (d.label) {
          case labels[0]:
            break;
          case labels[1]:
            size = 15;
            break;
          case labels[2]:
            size = 12;
            break;
          default:
            size = 12;
            break;
        }
        return size;
      })
      .attr("fill", function (d) {
        for (let i = 0; i < labels.length; i++) {
          if (d.label === labels[i]) return colors[i];
        }
      })
      .attr("name", function (d) {
        for (var key in d.properties) {
          return d.properties[key];
        }
        //return d.properties.name;
      })
      .attr("id", (d) => d.id)
      .text(function (d) {
        for (var key in d.properties) {
          return d.properties[key];
        }
        return d.properties.name;
      })
      //.attr('text-anchor', 'middle')
      .call(
        d3
          .drag()
          .on("start", dragstarted)
          .on("drag", dragged)
          .on("end", dragended)
      );

    // 圆增加title,当鼠标悬浮在圆上时
    node.append("title").text(function (d) {
      for (var key in d.properties) {
        return d.properties[key];
      }
    });

    // 处理缩放
    svg.call(
      d3
        .zoom()
        .scaleExtent([1 / 8, 8])
        .on("zoom", zoomed)
    );

    function zoomed() {
      link.attr("transform", d3.event.transform);
      node.attr("transform", d3.event.transform);
      text.attr("transform", d3.event.transform);
      linktext.attr("transform", d3.event.transform);
    }

    // simulation中ticked数据初始化并生成图形
    simulation.nodes(nodes).on("tick", ticked);

    simulation
      .force("link")
      .links(links)
      .distance((d) => {
        //每一边的长度
        let distance = 10;
        switch (d.source.label) {
          case labels[0]:
            distance += 80;
            break;
          case labels[1]:
            distance += 60;
            break;
          case labels[2]:
            distance += 60;
            break;
          default:
            distance += 60;
            break;
        }
        switch (d.target.label) {
          case labels[0]:
            distance += 80;
            break;
          case labels[1]:
            distance += 60;
            break;
          case labels[2]:
            distance += 60;
            break;
          default:
            distance += 60;
            break;
        }
        return distance;
      });

    // ticked()函数确定link线的起始点x、y坐标 node确定中心点 文本通过translate平移变化
    function ticked() {
      link
        .attr("x1", function (d) {
          return d.source.x;
        })
        .attr("y1", function (d) {
          return d.source.y;
        })
        .attr("x2", function (d) {
          return d.target.x;
        })
        .attr("y2", function (d) {
          return d.target.y;
        });

      linktext.attr("dx", function (d) {
        return (d.source.x + d.target.x) / 2;
      });
      linktext.attr("dy", function (d) {
        return (d.source.y + d.target.y) / 2;
      });

      node
        .attr("cx", function (d) {
          return d.x;
        })
        .attr("cy", function (d) {
          return d.y;
        });
      text
        .attr("dx", function (d) {
          return d.x;
        })
        .attr("dy", function (d) {
          return d.y;
        });
    }
  });
  // 拖动函数代码
  var dragging = false;
  // 开始拖动并更新相应的点
  function dragstarted(d) {
    if (!d3.event.active) simulation.alphaTarget(0.3).restart();
    d.fx = d.x;
    d.fy = d.y;
    dragging = true;
  }
  // 拖动进行中
  function dragged(d) {
    d.fx = d3.event.x;
    d.fy = d3.event.y;
  }
  // 拖动结束
  function dragended(d) {
    if (!d3.event.active) simulation.alphaTarget(0);
    d.fx = null;
    d.fy = null;
    dragging = false;
  }
  // span点击事件
  $("#mode span").click(function (event) {
    //span都设置为不激活状态
    $("#mode span").removeClass("active");
    //点击的span被激活
    $(this).addClass("active");
    //text隐藏 nodes显示
    if ($(this).text() == "Circle") {
      $(".texts text").hide();
      $(".nodes circle").show();
    } else {
      $(".texts text").show();
      $(".nodes circle").hide();
    }
  });

  // 三个开关标志，True表示打开
  var sw1 = true;
  var sw2 = true;
  var sw3 = true;
  //
  // 处理开关1点击后的事件(这些元素页面上本来有)
  $("#switch1 span").click(function (event) {
    // 把mode里面所有span的active全部去掉
    // 把被点击的这个设置为active
    $("#switch1 span").removeClass("active");
    $(this).addClass("active");

    if ($(this).text() == "On") {
      sw1 = true;
      d3.select("#svg1 .linetexts").selectAll("text").attr("fill-opacity", 0);
      //节点处理
      d3.select("#svg1 .nodes")
        .selectAll("circle")
        .attr("class", function (d) {
          // 当前选中类型实体显示
          for (var key in d.properties) {
            if (key == "cve_id") {
              return "";
            }
            if (key == "cwe_id" && sw1 == true) {
              return "";
            } else if (attributes.includes(key) && sw2 == true) {
              return "";
            } else if (attributes.includes(key) && sw3 == true) {
              return "";
            } else {
              return "inactive";
            }
          }
        });
      d3.select("#svg1 .links")
        .selectAll("line")
        .attr("class", function (d) {
          //console.log(d.source.label)
          if (
            (d.source.label == "CWE ID" || d.target.label == "CWE ID") &&
            sw1 == false
          ) {
            return "inactive";
          } else if (attributes.includes(d.source.label) && sw2 == false) {
            return "inactive";
          } else if (miscellaneous.includes(d.source.label) && sw3 == false) {
            return "inactive";
          } else {
            return "";
          }
        });
      d3.select("#svg1 .texts")
        .selectAll("text")
        .attr("class", function (d) {
          // 当前选中类型实体显示
          for (var key in d.properties) {
            if (key == "cve_id") {
              return "";
            }
            if (key == "cwe_id" && sw1 == true) {
              //console.log(key)
              return "";
            } else if (attributes.includes(key) && sw2 == true) {
              return "";
            } else if (attributes.includes(key) && sw3 == true) {
              return "";
            } else {
              return "inactive";
            }
          }
        });
    } else {
      sw1 = false;
      d3.select("#svg1 .linetexts").selectAll("text").attr("fill-opacity", 0);
      d3.select("#svg1 .nodes")
        .selectAll("circle")
        .attr("class", function (d) {
          // 当前选中类型实体显示
          for (var key in d.properties) {
            //console.log(key)
            if (key == "cve_id") {
              //console.log(key)
              return "";
            }
            if (key == "cwe_id" && sw1 == true) {
              //console.log(key)
              return "";
            } else if (attributes.includes(key) && sw2 == true) {
              return "";
            } else if (attributes.includes(key) && sw3 == true) {
              return "";
            } else {
              return "inactive";
            }
          }
        });
      d3.select("#svg1 .links")
        .selectAll("line")
        .attr("class", function (d) {
          //console.log(d.source.label)
          if (
            (d.source.label == "CWE ID" || d.target.label == "CWE ID") &&
            sw1 == false
          ) {
            return "inactive";
          } else if (attributes.includes(d.source.label) && sw2 == false) {
            return "inactive";
          } else if (miscellaneous.includes(d.source.label) && sw3 == false) {
            return "inactive";
          } else {
            return "";
          }
        });
      d3.select("#svg1 .texts")
        .selectAll("text")
        .attr("class", function (d) {
          // 当前选中类型实体显示
          for (var key in d.properties) {
            if (key == "cve_id") {
              return "";
            }
            if (key == "cwe_id" && sw1 == true) {
              //console.log(key)
              return "";
            } else if (attributes.includes(key) && sw2 == true) {
              return "";
            } else if (attributes.includes(key) && sw3 == true) {
              return "";
            } else {
              return "inactive";
            }
          }
        });
    }
  });

  // 处理开关2点击后的事件(这些元素页面上本来有)
  $("#switch2 span").click(function (event) {
    // 把mode里面所有span的active全部去掉
    // 把被点击的这个设置为active
    $("#switch2 span").removeClass("active");
    $(this).addClass("active");

    if ($(this).text() == "On") {
      sw2 = true;
      //节点处理
      d3.select("#svg1 .linetexts").selectAll("text").attr("fill-opacity", 0);
      d3.select("#svg1 .nodes")
        .selectAll("circle")
        .attr("class", function (d) {
          // 当前选中类型实体显示
          for (var key in d.properties) {
            //console.log(key)
            if (key == "cve_id") {
              //console.log(key)
              return "";
            }
            if (key == "cwe_id" && sw1 == true) {
              //console.log(key)
              return "";
            } else if (attributes.includes(key) && sw2 == true) {
              return "";
            } else if (attributes.includes(key) && sw3 == true) {
              return "";
            } else {
              return "inactive";
            }
          }
        });
      d3.select("#svg1 .links")
        .selectAll("line")
        .attr("class", function (d) {
          //console.log(d.source.label)
          if (
            (d.source.label == "CWE ID" || d.target.label == "CWE ID") &&
            sw1 == false
          ) {
            return "inactive";
          } else if (attributes.includes(d.source.label) && sw2 == false) {
            return "inactive";
          } else if (miscellaneous.includes(d.source.label) && sw3 == false) {
            return "inactive";
          } else {
            return "";
          }
        });
      d3.select("#svg1 .texts")
        .selectAll("text")
        .attr("class", function (d) {
          // 当前选中类型实体显示
          for (var key in d.properties) {
            if (key == "cve_id") {
              return "";
            }
            if (key == "cwe_id" && sw1 == true) {
              //console.log(key)
              return "";
            } else if (attributes.includes(key) && sw2 == true) {
              return "";
            } else if (attributes.includes(key) && sw3 == true) {
              return "";
            } else {
              return "inactive";
            }
          }
        });
    } else {
      sw2 = false;
      d3.select("#svg1 .linetexts").selectAll("text").attr("fill-opacity", 0);
      d3.select("#svg1 .nodes")
        .selectAll("circle")
        .attr("class", function (d) {
          // 当前选中类型实体显示
          for (var key in d.properties) {
            //console.log(key)
            if (key == "cve_id") {
              //console.log(key)
              return "";
            }
            if (key == "cwe_id" && sw1 == true) {
              //console.log(key)
              return "";
            } else if (attributes.includes(key) && sw2 == true) {
              return "";
            } else if (attributes.includes(key) && sw3 == true) {
              return "";
            } else {
              return "inactive";
            }
          }
        });
      d3.select("#svg1 .links")
        .selectAll("line")
        .attr("class", function (d) {
          //console.log(d.source.label)
          if (
            (d.source.label == "CWE ID" || d.target.label == "CWE ID") &&
            sw1 == false
          ) {
            return "inactive";
          } else if (attributes.includes(d.source.label) && sw2 == false) {
            return "inactive";
          } else if (miscellaneous.includes(d.source.label) && sw3 == false) {
            return "inactive";
          } else {
            return "";
          }
        });
      d3.select("#svg1 .texts")
        .selectAll("text")
        .attr("class", function (d) {
          // 当前选中类型实体显示
          for (var key in d.properties) {
            if (key == "cve_id") {
              return "";
            }
            if (key == "cwe_id" && sw1 == true) {
              //console.log(key)
              return "";
            } else if (
              attributes.includes(key) &&
              attributes.includes(key) &&
              sw2 == true
            ) {
              return "";
            } else if (attributes.includes(key) && sw3 == true) {
              return "";
            } else {
              return "inactive";
            }
          }
        });
    }
  });
  // 处理开关3点击后的事件(这些元素页面上本来有)
  $("#switch3 span").click(function (event) {
    // 把mode里面所有span的active全部去掉
    // 把被点击的这个设置为active
    $("#switch3 span").removeClass("active");
    $(this).addClass("active");

    if ($(this).text() == "On") {
      sw3 = true;
      //节点处理
      d3.select("#svg1 .linetexts").selectAll("text").attr("fill-opacity", 0);
      d3.select("#svg1 .nodes")
        .selectAll("circle")
        .attr("class", function (d) {
          // 当前选中类型实体显示
          for (var key in d.properties) {
            //console.log(key)
            if (key == "cve_id") {
              //console.log(key)
              return "";
            }
            if (key == "cwe_id" && sw1 == true) {
              //console.log(key)
              return "";
            } else if (attributes.includes(key) && sw2 == true) {
              return "";
            } else if (attributes.includes(key) && sw3 == true) {
              return "";
            } else {
              return "inactive";
            }
          }
        });
      d3.select("#svg1 .links")
        .selectAll("line")
        .attr("class", function (d) {
          //console.log(d.source.label)
          if (
            (d.source.label == "CWE ID" || d.target.label == "CWE ID") &&
            sw1 == false
          ) {
            return "inactive";
          } else if (attributes.includes(d.source.label) && sw2 == false) {
            return "inactive";
          } else if (miscellaneous.includes(d.source.label) && sw3 == false) {
            return "inactive";
          } else {
            return "";
          }
        });
      d3.select("#svg1 .texts")
        .selectAll("text")
        .attr("class", function (d) {
          // 当前选中类型实体显示
          for (var key in d.properties) {
            if (key == "cve_id") {
              return "";
            }
            if (key == "cwe_id" && sw1 == true) {
              //console.log(key)
              return "";
            } else if (attributes.includes(key) && sw2 == true) {
              return "";
            } else if (attributes.includes(key) && sw3 == true) {
              return "";
            } else {
              return "inactive";
            }
          }
        });
    } else {
      sw3 = false;
      d3.select("#svg1 .linetexts").selectAll("text").attr("fill-opacity", 0);
      d3.select("#svg1 .nodes")
        .selectAll("circle")
        .attr("class", function (d) {
          // 当前选中类型实体显示
          for (var key in d.properties) {
            //console.log(key)
            if (key == "cve_id") {
              //console.log(key)
              return "";
            }
            if (key == "cwe_id" && sw1 == true) {
              //console.log(key)
              return "";
            } else if (attributes.includes(key) && sw2 == true) {
              return "";
            } else if (attributes.includes(key) && sw3 == true) {
              return "";
            } else {
              return "inactive";
            }
          }
        });
      d3.select("#svg1 .links")
        .selectAll("line")
        .attr("class", function (d) {
          //console.log(d.source.label)
          if (
            (d.source.label == "CWE ID" || d.target.label == "CWE ID") &&
            sw1 == false
          ) {
            return "inactive";
          } else if (attributes.includes(d.source.label) && sw2 == false) {
            return "inactive";
          } else if (miscellaneous.includes(d.source.label) && sw3 == false) {
            return "inactive";
          } else {
            return "";
          }
        });
      d3.select("#svg1 .texts")
        .selectAll("text")
        .attr("class", function (d) {
          // 当前选中类型实体显示
          for (var key in d.properties) {
            if (key == "cve_id") {
              return "";
            }
            if (key == "cwe_id" && sw1 == true) {
              //console.log(key)
              return "";
            } else if (attributes.includes(key) && sw2 == true) {
              return "";
            } else if (attributes.includes(key) && sw3 == true) {
              return "";
            } else {
              return "inactive";
            }
          }
        });
    }
  });
  // 设置鼠标选中节点显示，并循环设置与选中节点相关联的节点显示
  // 为svg1父元素下的.nodes circle元素绑定鼠标进入事件
  $("#svg1").on("mouseenter", ".nodes circle", function (event) {
    // console.log(event)
    // 通过变量dragging保证拖动鼠标时，其状态不受影响，从而改变图形
    // 鼠标没有拖动才能处理事件
    if (!dragging) {
      // 获取被选中元素的名字
      var name = $(this).attr("name");
      var t1 = true;
      var t2 = true;
      var t3 = true;
      //console.log(name)
      var id = $(this).attr("id");
      // 设置#info h4样式的颜色为该节点的颜色，文本为该节点name
      // $(this).attr('fill')表示当前悬浮圆的填充色
      $("#info h4").css("color", $(this).attr("fill")).text(name);
      // 每次点击添加属性前把上次显示的信息去除，否则会不断叠加
      $("#info p").remove();
      // 遍历查找id对应的属性
      for (let item of nodes) {
        if (item.id == id) {
          //显示值及其字段名字
          for (var key in item.properties)
            $("#info").append(
              "<p><span>" + key + "</span>" + item.properties[key] + "</p>"
            );
        }
      }
      // 选择#svg1 .nodes中所有的circle，再增加个class
      d3.select("#svg1 .nodes")
        .selectAll("circle")
        .attr("class", function (d) {
          for (let item of nodes) {
            if (item.id == id) {
              for (var key in item.properties) {
                if (d.properties[key] == name) {
                  return "";
                } else {
                  for (var i = 0; i < links.length; i++) {
                    if (sw1 == false && sw2 == true && sw3 == true) {
                      var t1 = false;
                      if (
                        links[i]["source"].properties[key] == name &&
                        links[i]["target"].id == d.id
                      ) {
                        for (var key in links[i]["target"].properties) {
                          //显示值及其字段名字
                          if (key !== "cwe_id") {
                            $("#info").append(
                              "<p><span>" +
                                key +
                                "</span>" +
                                links[i]["target"].properties[key] +
                                "</p>"
                            );
                            return "";
                          }
                        }
                      }
                      if (
                        links[i]["target"].properties[key] == name &&
                        links[i]["source"].id == d.id
                      ) {
                        for (var key in links[i]["source"].properties) {
                          //显示值及其字段名字
                          if (key !== "cwe_id") {
                            $("#info").append(
                              "<p><span>" +
                                key +
                                "</span>" +
                                links[i]["source"].properties[key] +
                                "</p>"
                            );
                            return "";
                          }
                        }
                      }
                    } else if (sw1 == true && sw2 == false && sw3 == true) {
                      if (
                        links[i]["source"].properties[key] == name &&
                        links[i]["target"].id == d.id
                      ) {
                        for (var key in links[i]["target"].properties) {
                          //显示值及其字段名字
                          if (
                            key !== "version" &&
                            key !== "location" &&
                            key !== "consequence" &&
                            key !== "happened_scenario" &&
                            key !== "cause" &&
                            key !== "triggering_operation" &&
                            key !== "related_issue" &&
                            key !== "attacker"
                          ) {
                            $("#info").append(
                              "<p><span>" +
                                key +
                                "</span>" +
                                links[i]["target"].properties[key] +
                                "</p>"
                            );
                            return "";
                          }
                        }
                      }
                      if (
                        links[i]["target"].properties[key] == name &&
                        links[i]["source"].id == d.id
                      ) {
                        for (var key in links[i]["source"].properties) {
                          //显示值及其字段名字
                          if (
                            key !== "version" &&
                            key !== "location" &&
                            key !== "consequence" &&
                            key !== "happened_scenario" &&
                            key !== "cause" &&
                            key !== "triggering_operation" &&
                            key !== "related_issue" &&
                            key !== "attacker"
                          ) {
                            $("#info").append(
                              "<p><span>" +
                                key +
                                "</span>" +
                                links[i]["source"].properties[key] +
                                "</p>"
                            );
                            return "";
                          }
                        }
                      }
                    } else if (sw1 == true && sw2 == true && sw3 == false) {
                      if (
                        links[i]["source"].properties[key] == name &&
                        links[i]["target"].id == d.id
                      ) {
                        for (var key in links[i]["target"].properties) {
                          //显示值及其字段名字
                          if (
                            key !== "update_date" &&
                            key !== "publish_date" &&
                            key !== "score" &&
                            key !== "project" &&
                            key !== "vulnerability_classification" &&
                            key !== "commit_id"
                          ) {
                            $("#info").append(
                              "<p><span>" +
                                key +
                                "</span>" +
                                links[i]["target"].properties[key] +
                                "</p>"
                            );
                            return "";
                          }
                        }
                      }
                      if (
                        links[i]["target"].properties[key] == name &&
                        links[i]["source"].id == d.id
                      ) {
                        for (var key in links[i]["source"].properties) {
                          //显示值及其字段名字
                          if (
                            key !== "update_date" &&
                            key !== "publish_date" &&
                            key !== "score" &&
                            key !== "project" &&
                            key !== "vulnerability_classification" &&
                            key !== "commit_id"
                          ) {
                            $("#info").append(
                              "<p><span>" +
                                key +
                                "</span>" +
                                links[i]["source"].properties[key] +
                                "</p>"
                            );
                            return "";
                          }
                        }
                      }
                    } else if (sw1 == true && sw2 == false && sw3 == false) {
                      if (
                        links[i]["source"].properties[key] == name &&
                        links[i]["target"].id == d.id
                      ) {
                        for (var key in links[i]["target"].properties) {
                          //显示值及其字段名字
                          if (key == "cwe_id") {
                            $("#info").append(
                              "<p><span>" +
                                key +
                                "</span>" +
                                links[i]["target"].properties[key] +
                                "</p>"
                            );
                            return "";
                          }
                        }
                      }
                      if (
                        links[i]["target"].properties[key] == name &&
                        links[i]["source"].id == d.id
                      ) {
                        for (var key in links[i]["source"].properties) {
                          //显示值及其字段名字
                          if (key == "cwe_id" || key == "cve_id") {
                            $("#info").append(
                              "<p><span>" +
                                key +
                                "</span>" +
                                links[i]["source"].properties[key] +
                                "</p>"
                            );
                            return "";
                          }
                        }
                      }
                    } else if (sw1 == false && sw2 == true && sw3 == false) {
                      if (
                        links[i]["source"].properties[key] == name &&
                        links[i]["target"].id == d.id
                      ) {
                        for (var key in links[i]["target"].properties) {
                          //显示值及其字段名字
                          if (
                            key == "version" ||
                            key == "location" ||
                            key == "consequence" ||
                            key == "happened_scenario" ||
                            key == "cause" ||
                            key == "triggering_operation" ||
                            key == "related_issue" ||
                            key == "attacker"
                          ) {
                            $("#info").append(
                              "<p><span>" +
                                key +
                                "</span>" +
                                links[i]["target"].properties[key] +
                                "</p>"
                            );
                            return "";
                          }
                        }
                      }
                      if (
                        links[i]["target"].properties[key] == name &&
                        links[i]["source"].id == d.id
                      ) {
                        for (var key in links[i]["source"].properties) {
                          //显示值及其字段名字
                          if (
                            key == "version" ||
                            key == "location" ||
                            key == "consequence" ||
                            key == "happened_scenario" ||
                            key == "cause" ||
                            key == "triggering_operation" ||
                            key == "related_issue" ||
                            key == "attacker" ||
                            key == "cve_id"
                          ) {
                            $("#info").append(
                              "<p><span>" +
                                key +
                                "</span>" +
                                links[i]["source"].properties[key] +
                                "</p>"
                            );
                            return "";
                          }
                        }
                      }
                    } else if (sw1 == false && sw2 == false && sw3 == true) {
                      if (
                        links[i]["source"].properties[key] == name &&
                        links[i]["target"].id == d.id
                      ) {
                        for (var key in links[i]["target"].properties) {
                          //显示值及其字段名字
                          if (
                            key == "update_date" ||
                            key == "publish_date" ||
                            key == "score" ||
                            key == "project" ||
                            key == "vulnerability_classification" ||
                            key == "commit_id"
                          ) {
                            $("#info").append(
                              "<p><span>" +
                                key +
                                "</span>" +
                                links[i]["target"].properties[key] +
                                "</p>"
                            );
                            return "";
                          }
                        }
                      }
                      if (
                        links[i]["target"].properties[key] == name &&
                        links[i]["source"].id == d.id
                      ) {
                        for (var key in links[i]["source"].properties) {
                          //显示值及其字段名字
                          if (
                            key == "update_date" ||
                            key == "publish_date" ||
                            key == "score" ||
                            key == "project" ||
                            key == "vulnerability_classification" ||
                            key == "commit_id" ||
                            key == "cve_id"
                          ) {
                            $("#info").append(
                              "<p><span>" +
                                key +
                                "</span>" +
                                links[i]["source"].properties[key] +
                                "</p>"
                            );
                            return "";
                          }
                        }
                      }
                    } else if (sw1 == false && sw2 == false && sw3 == false) {
                      if (
                        links[i]["source"].properties[key] == name &&
                        links[i]["target"].id == d.id
                      ) {
                        for (var key in links[i]["target"].properties) {
                          //显示值及其字段名字
                          if (key == "cve_id") {
                            $("#info").append(
                              "<p><span>" +
                                key +
                                "</span>" +
                                links[i]["target"].properties[key] +
                                "</p>"
                            );
                            return "";
                          }
                        }
                      }
                      if (
                        links[i]["target"].properties[key] == name &&
                        links[i]["source"].id == d.id
                      ) {
                        for (var key in links[i]["source"].properties) {
                          //显示值及其字段名字
                          if (key == "cve_id") {
                            $("#info").append(
                              "<p><span>" +
                                key +
                                "</span>" +
                                links[i]["source"].properties[key] +
                                "</p>"
                            );
                            return "";
                          }
                        }
                      }
                    } else {
                      if (
                        links[i]["source"].properties[key] == name &&
                        links[i]["target"].id == d.id
                      ) {
                        for (var key in links[i]["target"].properties) {
                          //显示值及其字段名字

                          $("#info").append(
                            "<p><span>" +
                              key +
                              "</span>" +
                              links[i]["target"].properties[key] +
                              "</p>"
                          );
                          return "";
                        }
                      }
                      if (
                        links[i]["target"].properties[key] == name &&
                        links[i]["source"].id == d.id
                      ) {
                        for (var key in links[i]["source"].properties) {
                          //显示值及其字段名字

                          $("#info").append(
                            "<p><span>" +
                              key +
                              "</span>" +
                              links[i]["source"].properties[key] +
                              "</p>"
                          );
                          return "";
                        }
                      }
                    }
                  }
                  return "inactive"; //前面CSS定义 .nodes circle.inactive
                }
              }
            }
          }
        });
      // 处理相邻的边line是否隐藏 注意 ||
      d3.select("#svg1 .links")
        .selectAll("line")
        .attr("class", function (d) {
          for (let item of nodes) {
            if (item.id == id) {
              for (var key in item.properties) {
                if (sw1 == false && sw2 == true && sw3 == true) {
                  if (
                    (d.source.properties[key] == name ||
                      d.target.properties[key] == name) &&
                    d.type !== "cwe number"
                  ) {
                    //console.log(d.source.properties[key])
                    return "";
                  } else {
                    return "inactive";
                  }
                } else if (sw1 == true && sw2 == false && sw3 == true) {
                  if (
                    (d.source.properties[key] == name ||
                      d.target.properties[key] == name) &&
                    d.type !== "version" &&
                    d.type !== "location" &&
                    d.type !== "consequence" &&
                    d.type !== "happened scenario" &&
                    d.type !== "cause" &&
                    key !== "triggering operation" &&
                    d.type !== "related issue" &&
                    d.type !== "attacker"
                  ) {
                    //console.log(d.source.properties[key])
                    return "";
                  } else {
                    return "inactive";
                  }
                } else if (sw1 == true && sw2 == true && sw3 == false) {
                  if (
                    (d.source.properties[key] == name ||
                      d.target.properties[key] == name) &&
                    d.type !== "update date" &&
                    d.type !== "publish date" &&
                    d.type !== "score" &&
                    d.type !== "project" &&
                    d.type !== "vulnerability classification" &&
                    d.type !== "commit id"
                  ) {
                    //console.log(d.source.properties[key])
                    return "";
                  } else {
                    return "inactive";
                  }
                } else if (sw1 == true && sw2 == false && sw3 == false) {
                  if (
                    (d.source.properties[key] == name ||
                      d.target.properties[key] == name) &&
                    d.type == "cwe number"
                  ) {
                    //console.log(d.source.properties[key])
                    return "";
                  } else {
                    return "inactive";
                  }
                } else if (sw1 == false && sw2 == true && sw3 == false) {
                  if (
                    (d.source.properties[key] == name ||
                      d.target.properties[key] == name) &&
                    (d.type == "version" ||
                      d.type == "location" ||
                      d.type == "consequence" ||
                      d.type == "happened scenario" ||
                      d.type == "cause" ||
                      d.type == "triggering operation" ||
                      d.type == "related issue" ||
                      d.type == "attacker")
                  ) {
                    //console.log(d.source.properties[key])
                    return "";
                  } else {
                    return "inactive";
                  }
                } else if (sw1 == false && sw2 == false && sw3 == true) {
                  if (
                    (d.source.properties[key] == name ||
                      d.target.properties[key] == name) &&
                    (d.type == "update date" ||
                      d.type == "publish date" ||
                      d.type == "score" ||
                      d.type == "project" ||
                      d.type == "vulnerability classification" ||
                      d.type == "commit id")
                  ) {
                    //console.log(d.source.properties[key])
                    return "";
                  } else {
                    return "inactive";
                  }
                } else if (sw1 == false && sw2 == false && sw3 == false) {
                  return "inactive";
                } else {
                  if (
                    d.source.properties[key] == name ||
                    d.target.properties[key] == name
                  ) {
                    //console.log(d.source.properties[key])
                    return "";
                  } else {
                    return "inactive";
                  }
                }
              }
            }
          }
        });
      // 只显示之间相连的关系名
      d3.select("#svg1 .linetexts")
        .selectAll("text")
        .attr("class", function (d) {
          for (let item of nodes) {
            if (item.id == id) {
              for (var key in item.properties) {
                if (sw1 == false && sw2 == true && sw3 == true) {
                  if (
                    (d.source.properties[key] == name ||
                      d.target.properties[key] == name) &&
                    d.type !== "cwe number"
                  ) {
                    //console.log(d.source.properties[key])
                    d3.select(this).attr("fill-opacity", 1);
                  } else {
                    d3.select(this).attr("fill-opacity", 0);
                  }
                } else if (sw1 == true && sw2 == false && sw3 == true) {
                  if (
                    (d.source.properties[key] == name ||
                      d.target.properties[key] == name) &&
                    d.type !== "version" &&
                    d.type !== "location" &&
                    d.type !== "consequence" &&
                    d.type !== "happened scenario" &&
                    d.type !== "cause" &&
                    key !== "triggering operation" &&
                    d.type !== "related issue" &&
                    d.type !== "attacker"
                  ) {
                    //console.log(d.source.properties[key])
                    d3.select(this).attr("fill-opacity", 1);
                  } else {
                    d3.select(this).attr("fill-opacity", 0);
                  }
                } else if (sw1 == true && sw2 == true && sw3 == false) {
                  if (
                    (d.source.properties[key] == name ||
                      d.target.properties[key] == name) &&
                    d.type !== "update date" &&
                    d.type !== "publish date" &&
                    d.type !== "score" &&
                    d.type !== "project" &&
                    d.type !== "vulnerability classification" &&
                    d.type !== "commit id"
                  ) {
                    //console.log(d.source.properties[key])
                    d3.select(this).attr("fill-opacity", 1);
                  } else {
                    d3.select(this).attr("fill-opacity", 0);
                  }
                } else if (sw1 == true && sw2 == false && sw3 == false) {
                  if (
                    (d.source.properties[key] == name ||
                      d.target.properties[key] == name) &&
                    d.type == "cwe number"
                  ) {
                    //console.log(d.source.properties[key])
                    d3.select(this).attr("fill-opacity", 1);
                  } else {
                    d3.select(this).attr("fill-opacity", 0);
                  }
                } else if (sw1 == false && sw2 == true && sw3 == false) {
                  if (
                    (d.source.properties[key] == name ||
                      d.target.properties[key] == name) &&
                    (d.type == "version" ||
                      d.type == "location" ||
                      d.type == "consequence" ||
                      d.type == "happened scenario" ||
                      d.type == "cause" ||
                      d.type == "triggering operation" ||
                      d.type == "related issue" ||
                      d.type == "attacker")
                  ) {
                    //console.log(d.source.properties[key])
                    d3.select(this).attr("fill-opacity", 1);
                  } else {
                    d3.select(this).attr("fill-opacity", 0);
                  }
                } else if (sw1 == false && sw2 == false && sw3 == true) {
                  if (
                    (d.source.properties[key] == name ||
                      d.target.properties[key] == name) &&
                    (d.type == "update date" ||
                      d.type == "publish date" ||
                      d.type == "score" ||
                      d.type == "project" ||
                      d.type == "vulnerability classification" ||
                      d.type == "commit id")
                  ) {
                    //console.log(d.source.properties[key])
                    d3.select(this).attr("fill-opacity", 1);
                  } else {
                    d3.select(this).attr("fill-opacity", 0);
                  }
                } else if (sw1 == false && sw2 == false && sw3 == false) {
                  d3.select(this).attr("fill-opacity", 0);
                } else {
                  if (
                    d.source.properties[key] == name ||
                    d.target.properties[key] == name
                  ) {
                    //console.log(d.source.properties[key])
                    d3.select(this).attr("fill-opacity", 1);
                  } else {
                    d3.select(this).attr("fill-opacity", 0);
                  }
                }
              }
            }
          }
        });
    }
  });
  // 鼠标移开还原原图，显示所有隐藏的点及边
  $("#svg1").on("mouseleave", ".nodes circle", function (event) {
    //return '';
    if (!dragging) {
    }
  });

  // 鼠标进入文本显示相邻节点及边
  $("#svg1").on("mouseenter", ".texts text", function (event) {
    // console.log(event)
    // 通过变量dragging保证拖动鼠标时，其状态不受影响，从而改变图形
    // 鼠标没有拖动才能处理事件
    if (!dragging) {
      // 获取被选中元素的名字
      var name = $(this).attr("name");

      //console.log(name)
      var id = $(this).attr("id");
      // 设置#info h4样式的颜色为该节点的颜色，文本为该节点name
      // $(this).attr('fill')表示当前悬浮圆的填充色
      $("#info h4").css("color", $(this).attr("fill")).text(name);
      // 每次点击添加属性前把上次显示的信息去除，否则会不断叠加
      $("#info p").remove();
      // 遍历查找id对应的属性
      for (let item of nodes) {
        if (item.id == id) {
          //显示值及其字段名字
          for (var key in item.properties)
            $("#info").append(
              "<p><span>" + key + "</span>" + item.properties[key] + "</p>"
            );
        }
      }
      // 选择#svg1 .nodes中所有的circle，再增加个class
      d3.select("#svg1 .texts")
        .selectAll("text")
        .attr("class", function (d) {
          for (let item of nodes) {
            if (item.id == id) {
              for (var key in item.properties) {
                if (d.properties[key] == name) {
                  return "";
                } else {
                  for (var i = 0; i < links.length; i++) {
                    if (sw1 == false && sw2 == true && sw3 == true) {
                      if (
                        links[i]["source"].properties[key] == name &&
                        links[i]["target"].id == d.id
                      ) {
                        for (var key in links[i]["target"].properties) {
                          //显示值及其字段名字
                          if (key !== "cwe_id") {
                            $("#info").append(
                              "<p><span>" +
                                key +
                                "</span>" +
                                links[i]["target"].properties[key] +
                                "</p>"
                            );
                            return "";
                          }
                        }
                      }
                      if (
                        links[i]["target"].properties[key] == name &&
                        links[i]["source"].id == d.id
                      ) {
                        for (var key in links[i]["source"].properties) {
                          //显示值及其字段名字
                          if (key !== "cwe_id") {
                            $("#info").append(
                              "<p><span>" +
                                key +
                                "</span>" +
                                links[i]["source"].properties[key] +
                                "</p>"
                            );
                            return "";
                          }
                        }
                      }
                    } else if (sw1 == true && sw2 == false && sw3 == true) {
                      if (
                        links[i]["source"].properties[key] == name &&
                        links[i]["target"].id == d.id
                      ) {
                        for (var key in links[i]["target"].properties) {
                          //显示值及其字段名字
                          if (
                            key !== "version" &&
                            key !== "location" &&
                            key !== "consequence" &&
                            key !== "happened_scenario" &&
                            key !== "cause" &&
                            key !== "triggering_operation" &&
                            key !== "related_issue" &&
                            key !== "attacker"
                          ) {
                            $("#info").append(
                              "<p><span>" +
                                key +
                                "</span>" +
                                links[i]["target"].properties[key] +
                                "</p>"
                            );
                            return "";
                          }
                        }
                      }
                      if (
                        links[i]["target"].properties[key] == name &&
                        links[i]["source"].id == d.id
                      ) {
                        for (var key in links[i]["source"].properties) {
                          //显示值及其字段名字
                          if (
                            key !== "version" &&
                            key !== "location" &&
                            key !== "consequence" &&
                            key !== "happened_scenario" &&
                            key !== "cause" &&
                            key !== "triggering_operation" &&
                            key !== "related_issue" &&
                            key !== "attacker"
                          ) {
                            $("#info").append(
                              "<p><span>" +
                                key +
                                "</span>" +
                                links[i]["source"].properties[key] +
                                "</p>"
                            );
                            return "";
                          }
                        }
                      }
                    } else if (sw1 == true && sw2 == true && sw3 == false) {
                      if (
                        links[i]["source"].properties[key] == name &&
                        links[i]["target"].id == d.id
                      ) {
                        for (var key in links[i]["target"].properties) {
                          //显示值及其字段名字
                          if (
                            key !== "update_date" &&
                            key !== "publish_date" &&
                            key !== "score" &&
                            key !== "project" &&
                            key !== "vulnerability_classification" &&
                            key !== "commit_id"
                          ) {
                            $("#info").append(
                              "<p><span>" +
                                key +
                                "</span>" +
                                links[i]["target"].properties[key] +
                                "</p>"
                            );
                            return "";
                          }
                        }
                      }
                      if (
                        links[i]["target"].properties[key] == name &&
                        links[i]["source"].id == d.id
                      ) {
                        for (var key in links[i]["source"].properties) {
                          //显示值及其字段名字
                          if (
                            key !== "update_date" &&
                            key !== "publish_date" &&
                            key !== "score" &&
                            key !== "project" &&
                            key !== "vulnerability_classification" &&
                            key !== "commit_id"
                          ) {
                            $("#info").append(
                              "<p><span>" +
                                key +
                                "</span>" +
                                links[i]["source"].properties[key] +
                                "</p>"
                            );
                            return "";
                          }
                        }
                      }
                    } else if (sw1 == true && sw2 == false && sw3 == false) {
                      if (
                        links[i]["source"].properties[key] == name &&
                        links[i]["target"].id == d.id
                      ) {
                        for (var key in links[i]["target"].properties) {
                          //显示值及其字段名字
                          if (key == "cwe_id") {
                            $("#info").append(
                              "<p><span>" +
                                key +
                                "</span>" +
                                links[i]["target"].properties[key] +
                                "</p>"
                            );
                            return "";
                          }
                        }
                      }
                      if (
                        links[i]["target"].properties[key] == name &&
                        links[i]["source"].id == d.id
                      ) {
                        for (var key in links[i]["source"].properties) {
                          //显示值及其字段名字
                          if (key == "cwe_id" || key == "cve_id") {
                            $("#info").append(
                              "<p><span>" +
                                key +
                                "</span>" +
                                links[i]["source"].properties[key] +
                                "</p>"
                            );
                            return "";
                          }
                        }
                      }
                    } else if (sw1 == false && sw2 == true && sw3 == false) {
                      if (
                        links[i]["source"].properties[key] == name &&
                        links[i]["target"].id == d.id
                      ) {
                        for (var key in links[i]["target"].properties) {
                          //显示值及其字段名字
                          if (
                            key == "version" ||
                            key == "location" ||
                            key == "consequence" ||
                            key == "happened_scenario" ||
                            key == "cause" ||
                            key == "triggering_operation" ||
                            key == "related_issue" ||
                            key == "attacker"
                          ) {
                            $("#info").append(
                              "<p><span>" +
                                key +
                                "</span>" +
                                links[i]["target"].properties[key] +
                                "</p>"
                            );
                            return "";
                          }
                        }
                      }
                      if (
                        links[i]["target"].properties[key] == name &&
                        links[i]["source"].id == d.id
                      ) {
                        for (var key in links[i]["source"].properties) {
                          //显示值及其字段名字
                          if (
                            key == "version" ||
                            key == "location" ||
                            key == "consequence" ||
                            key == "happened_scenario" ||
                            key == "cause" ||
                            key == "triggering_operation" ||
                            key == "related_issue" ||
                            key == "attacker" ||
                            key == "cve_id"
                          ) {
                            $("#info").append(
                              "<p><span>" +
                                key +
                                "</span>" +
                                links[i]["source"].properties[key] +
                                "</p>"
                            );
                            return "";
                          }
                        }
                      }
                    } else if (sw1 == false && sw2 == false && sw3 == true) {
                      if (
                        links[i]["source"].properties[key] == name &&
                        links[i]["target"].id == d.id
                      ) {
                        for (var key in links[i]["target"].properties) {
                          //显示值及其字段名字
                          if (
                            key == "update_date" ||
                            key == "publish_date" ||
                            key == "score" ||
                            key == "project" ||
                            key == "vulnerability_classification" ||
                            key == "commit_id"
                          ) {
                            $("#info").append(
                              "<p><span>" +
                                key +
                                "</span>" +
                                links[i]["target"].properties[key] +
                                "</p>"
                            );
                            return "";
                          }
                        }
                      }
                      if (
                        links[i]["target"].properties[key] == name &&
                        links[i]["source"].id == d.id
                      ) {
                        for (var key in links[i]["source"].properties) {
                          //显示值及其字段名字
                          if (
                            key == "update_date" ||
                            key == "publish_date" ||
                            key == "score" ||
                            key == "project" ||
                            key == "vulnerability_classification" ||
                            key == "commit_id" ||
                            key == "cve_id"
                          ) {
                            $("#info").append(
                              "<p><span>" +
                                key +
                                "</span>" +
                                links[i]["source"].properties[key] +
                                "</p>"
                            );
                            return "";
                          }
                        }
                      }
                    } else if (sw1 == false && sw2 == false && sw3 == false) {
                      if (
                        links[i]["source"].properties[key] == name &&
                        links[i]["target"].id == d.id
                      ) {
                        for (var key in links[i]["target"].properties) {
                          //显示值及其字段名字
                          if (key == "cve_id") {
                            $("#info").append(
                              "<p><span>" +
                                key +
                                "</span>" +
                                links[i]["target"].properties[key] +
                                "</p>"
                            );
                            return "";
                          }
                        }
                      }
                      if (
                        links[i]["target"].properties[key] == name &&
                        links[i]["source"].id == d.id
                      ) {
                        for (var key in links[i]["source"].properties) {
                          //显示值及其字段名字
                          if (key == "cve_id") {
                            $("#info").append(
                              "<p><span>" +
                                key +
                                "</span>" +
                                links[i]["source"].properties[key] +
                                "</p>"
                            );
                            return "";
                          }
                        }
                      }
                    } else {
                      if (
                        links[i]["source"].properties[key] == name &&
                        links[i]["target"].id == d.id
                      ) {
                        for (var key in links[i]["target"].properties) {
                          //显示值及其字段名字

                          $("#info").append(
                            "<p><span>" +
                              key +
                              "</span>" +
                              links[i]["target"].properties[key] +
                              "</p>"
                          );
                          return "";
                        }
                      }
                      if (
                        links[i]["target"].properties[key] == name &&
                        links[i]["source"].id == d.id
                      ) {
                        for (var key in links[i]["source"].properties) {
                          //显示值及其字段名字

                          $("#info").append(
                            "<p><span>" +
                              key +
                              "</span>" +
                              links[i]["source"].properties[key] +
                              "</p>"
                          );
                          return "";
                        }
                      }
                    }
                  }
                  return "inactive"; //前面CSS定义 .nodes circle.inactive
                }
              }
            }
          }
        });
      // 处理相邻的边line是否隐藏 注意 ||
      d3.select("#svg1 .links")
        .selectAll("line")
        .attr("class", function (d) {
          for (let item of nodes) {
            if (item.id == id) {
              for (var key in item.properties) {
                if (sw1 == false && sw2 == true && sw3 == true) {
                  if (
                    (d.source.properties[key] == name ||
                      d.target.properties[key] == name) &&
                    d.type !== "cwe number"
                  ) {
                    //console.log(d.source.properties[key])
                    return "";
                  } else {
                    return "inactive";
                  }
                } else if (sw1 == true && sw2 == false && sw3 == true) {
                  if (
                    (d.source.properties[key] == name ||
                      d.target.properties[key] == name) &&
                    d.type !== "version" &&
                    d.type !== "location" &&
                    d.type !== "consequence" &&
                    d.type !== "happened scenario" &&
                    d.type !== "cause" &&
                    key !== "triggering operation" &&
                    d.type !== "related issue" &&
                    d.type !== "attacker"
                  ) {
                    //console.log(d.source.properties[key])
                    return "";
                  } else {
                    return "inactive";
                  }
                } else if (sw1 == true && sw2 == true && sw3 == false) {
                  if (
                    (d.source.properties[key] == name ||
                      d.target.properties[key] == name) &&
                    d.type !== "update date" &&
                    d.type !== "publish date" &&
                    d.type !== "score" &&
                    d.type !== "project" &&
                    d.type !== "vulnerability classification" &&
                    d.type !== "commit id"
                  ) {
                    //console.log(d.source.properties[key])
                    return "";
                  } else {
                    return "inactive";
                  }
                } else if (sw1 == true && sw2 == false && sw3 == false) {
                  if (
                    (d.source.properties[key] == name ||
                      d.target.properties[key] == name) &&
                    d.type == "cwe number"
                  ) {
                    //console.log(d.source.properties[key])
                    return "";
                  } else {
                    return "inactive";
                  }
                } else if (sw1 == false && sw2 == true && sw3 == false) {
                  if (
                    (d.source.properties[key] == name ||
                      d.target.properties[key] == name) &&
                    (d.type == "version" ||
                      d.type == "location" ||
                      d.type == "consequence" ||
                      d.type == "happened scenario" ||
                      d.type == "cause" ||
                      d.type == "triggering operation" ||
                      d.type == "related issue" ||
                      d.type == "attacker")
                  ) {
                    //console.log(d.source.properties[key])
                    return "";
                  } else {
                    return "inactive";
                  }
                } else if (sw1 == false && sw2 == false && sw3 == true) {
                  if (
                    (d.source.properties[key] == name ||
                      d.target.properties[key] == name) &&
                    (d.type == "update date" ||
                      d.type == "publish date" ||
                      d.type == "score" ||
                      d.type == "project" ||
                      d.type == "vulnerability classification" ||
                      d.type == "commit id")
                  ) {
                    //console.log(d.source.properties[key])
                    return "";
                  } else {
                    return "inactive";
                  }
                } else if (sw1 == false && sw2 == false && sw3 == false) {
                  return "inactive";
                } else {
                  if (
                    d.source.properties[key] == name ||
                    d.target.properties[key] == name
                  ) {
                    //console.log(d.source.properties[key])
                    return "";
                  } else {
                    return "inactive";
                  }
                }
              }
            }
          }
        });
      // 只显示之间相连的关系名
      d3.select("#svg1 .linetexts")
        .selectAll("text")
        .attr("class", function (d) {
          for (let item of nodes) {
            if (item.id == id) {
              for (var key in item.properties) {
                if (sw1 == false && sw2 == true && sw3 == true) {
                  if (
                    (d.source.properties[key] == name ||
                      d.target.properties[key] == name) &&
                    d.type !== "cwe number"
                  ) {
                    //console.log(d.source.properties[key])
                    d3.select(this).attr("fill-opacity", 1);
                  } else {
                    d3.select(this).attr("fill-opacity", 0);
                  }
                } else if (sw1 == true && sw2 == false && sw3 == true) {
                  if (
                    (d.source.properties[key] == name ||
                      d.target.properties[key] == name) &&
                    d.type !== "version" &&
                    d.type !== "location" &&
                    d.type !== "consequence" &&
                    d.type !== "happened scenario" &&
                    d.type !== "cause" &&
                    key !== "triggering operation" &&
                    d.type !== "related issue" &&
                    d.type !== "attacker"
                  ) {
                    //console.log(d.source.properties[key])
                    d3.select(this).attr("fill-opacity", 1);
                  } else {
                    d3.select(this).attr("fill-opacity", 0);
                  }
                } else if (sw1 == true && sw2 == true && sw3 == false) {
                  if (
                    (d.source.properties[key] == name ||
                      d.target.properties[key] == name) &&
                    d.type !== "update date" &&
                    d.type !== "publish date" &&
                    d.type !== "score" &&
                    d.type !== "project" &&
                    d.type !== "vulnerability classification" &&
                    d.type !== "commit id"
                  ) {
                    //console.log(d.source.properties[key])
                    d3.select(this).attr("fill-opacity", 1);
                  } else {
                    d3.select(this).attr("fill-opacity", 0);
                  }
                } else if (sw1 == true && sw2 == false && sw3 == false) {
                  if (
                    (d.source.properties[key] == name ||
                      d.target.properties[key] == name) &&
                    d.type == "cwe number"
                  ) {
                    //console.log(d.source.properties[key])
                    d3.select(this).attr("fill-opacity", 1);
                  } else {
                    d3.select(this).attr("fill-opacity", 0);
                  }
                } else if (sw1 == false && sw2 == true && sw3 == false) {
                  if (
                    (d.source.properties[key] == name ||
                      d.target.properties[key] == name) &&
                    attributes.includes(d.type)
                  ) {
                    //console.log(d.source.properties[key])
                    d3.select(this).attr("fill-opacity", 1);
                  } else {
                    d3.select(this).attr("fill-opacity", 0);
                  }
                } else if (sw1 == false && sw2 == false && sw3 == true) {
                  if (
                    (d.source.properties[key] == name ||
                      d.target.properties[key] == name) &&
                    miscellaneous.includes(d.type)
                  ) {
                    d3.select(this).attr("fill-opacity", 1);
                  } else {
                    d3.select(this).attr("fill-opacity", 0);
                  }
                } else if (sw1 == false && sw2 == false && sw3 == false) {
                  d3.select(this).attr("fill-opacity", 0);
                } else {
                  if (
                    d.source.properties[key] == name ||
                    d.target.properties[key] == name
                  ) {
                    //console.log(d.source.properties[key])
                    d3.select(this).attr("fill-opacity", 1);
                  } else {
                    d3.select(this).attr("fill-opacity", 0);
                  }
                }
              }
            }
          }
        });
    }
  });
  // 鼠标移除文本还原相应节点及边
  $("#svg1").on("mouseleave", ".texts text", function (event) {
    if (!dragging) {
    }
  });

  // 搜索框中输入内容则响应该事件
  // keyup按键敲击响应event
  $("#search input").keyup(function (event) {
    // 如果Input值是空的显示所有的圆和线(没有进行筛选)
    if ($(this).val() == "") {
      d3.select("#svg1 .linetexts").selectAll("text").attr("fill-opacity", 0);
      d3.select("#svg1 .nodes")
        .selectAll("circle")
        .attr("class", function (d) {
          // 当前选中类型实体显示
          for (var key in d.properties) {
            //console.log(key)
            if (key == "cve_id") {
              //console.log(key)
              return "";
            }
            if (key == "cwe_id" && sw1 == true) {
              //console.log(key)
              return "";
            } else if (attributes.includes(key) && sw2 == true) {
              return "";
            } else if (miscellaneous.includes(key) && sw3 == true) {
              return "";
            } else {
              return "inactive";
            }
          }
        });
      d3.select("#svg1 .links")
        .selectAll("line")
        .attr("class", function (d) {
          if (
            (d.source.label == "CWE ID" || d.target.label == "CWE ID") &&
            sw1 == false
          ) {
            return "inactive";
          } else if (attributes.includes(d.source.label) && sw2 == false) {
            return "inactive";
          } else if (miscellaneous.includes(d.source.label) && sw3 == false) {
            return "inactive";
          } else {
            return "";
          }
        });
      d3.select("#svg1 .texts")
        .selectAll("text")
        .attr("class", function (d) {
          // 当前选中类型实体显示
          for (var key in d.properties) {
            if (key == "cve_id") {
              return "";
            }
            if (key == "cwe_id" && sw1 == true) {
              //console.log(key)
              return "";
            } else if (attributes.includes(key) && sw2 == true) {
              return "";
            } else if (miscellaneous.includes(key) && sw3 == true) {
              return "";
            } else {
              return "inactive";
            }
          }
        });
    }
    // 否则判断判断三个元素是否等于name值，等于则显示该值
    else {
      var name = $(this).val();

      // 搜索所有的节点
      d3.select("#svg1 .nodes")
        .selectAll("circle")
        .attr("class", function (d) {
          // 输入节点id的小写等于name则显示，否则隐藏
          for (var key in d.properties) {
            if (
              d.properties[key].toLowerCase().indexOf(name.toLowerCase()) >= 0
            ) {
              //console.log(d.properties[key])
              return "";
            } else {
              return "inactive";
            }
          }
        });
      // 搜索texts
      d3.select("#svg1 .texts")
        .selectAll("text")
        .attr("class", function (d) {
          for (var key in d.properties) {
            if (
              d.properties[key].toLowerCase().indexOf(name.toLowerCase()) >= 0
            ) {
              return "";
            } else {
              return "inactive"; //前面CSS定义 .nodes circle.inactive
            }
          }
        });

      d3.select("#svg1 .links")
        .selectAll("line")
        .attr("class", function (d) {
          return "inactive";
        });
      d3.select("#svg1 .linetexts").selectAll("text").attr("fill-opacity", 0);
    }
  });

  // 如果用删除键删除了
  // 点击到搜索框内
  $("#search input").bind("click", function (e) {
    if ($("#search input").val() == "") {
      d3.select("#svg1 .linetexts").selectAll("text").attr("fill-opacity", 0);
      d3.select("#svg1 .nodes")
        .selectAll("circle")
        .attr("class", function (d) {
          // 当前选中类型实体显示
          for (var key in d.properties) {
            //console.log(key)
            if (key == "cve_id") {
              //console.log(key)
              return "";
            }
            if (key == "cwe_id" && sw1 == true) {
              //console.log(key)
              return "";
            } else if (attributes.includes(key) && sw2 == true) {
              return "";
            } else if (miscellaneous.includes(key) && sw3 == true) {
              return "";
            } else {
              return "inactive";
            }
          }
        });
      d3.select("#svg1 .links")
        .selectAll("line")
        .attr("class", function (d) {
          //console.log(d.source.label)
          if (
            (d.source.label == "CWE ID" || d.target.label == "CWE ID") &&
            sw1 == false
          ) {
            return "inactive";
          } else if (attributes.includes(d.source.label) && sw2 == false) {
            return "inactive";
          } else if (miscellaneous.includes(d.source.label) && sw3 == false) {
            return "inactive";
          } else {
            return "";
          }
        });
      d3.select("#svg1 .texts")
        .selectAll("text")
        .attr("class", function (d) {
          // 当前选中类型实体显示
          for (var key in d.properties) {
            if (key == "cve_id") {
              return "";
            }
            if (key == "cwe_id" && sw1 == true) {
              return "";
            } else if (attributes.includes(key) && sw2 == true) {
              return "";
            } else if (miscellaneous.includes(key) && sw3 == true) {
              return "";
            } else {
              return "inactive";
            }
          }
        });
    }
  });
  // 点击到搜索框外
  $("#search input").bind("blur", function (e) {
    if ($("#search input").val() == "") {
      d3.select("#svg1 .linetexts").selectAll("text").attr("fill-opacity", 0);
      d3.select("#svg1 .nodes")
        .selectAll("circle")
        .attr("class", function (d) {
          // 当前选中类型实体显示
          for (var key in d.properties) {
            //console.log(key)
            if (key == "cve_id") {
              //console.log(key)
              return "";
            }
            if (key == "cwe_id" && sw1 == true) {
              //console.log(key)
              return "";
            } else if (attributes.includes(key) && sw2 == true) {
              return "";
            } else if (miscellaneous.includes(key) && sw3 == true) {
              return "";
            } else {
              return "inactive";
            }
          }
        });
      d3.select("#svg1 .links")
        .selectAll("line")
        .attr("class", function (d) {
          //console.log(d.source.label)
          if (
            (d.source.label == "CWE ID" || d.target.label == "CWE ID") &&
            sw1 == false
          ) {
            return "inactive";
          } else if (attributes.includes(d.source.label) && sw2 == false) {
            return "inactive";
          } else if (miscellaneous.includes(d.source.label) && sw3 == false) {
            return "inactive";
          } else {
            return "";
          }
        });
      d3.select("#svg1 .texts")
        .selectAll("text")
        .attr("class", function (d) {
          // 当前选中类型实体显示
          for (var key in d.properties) {
            if (key == "cve_id") {
              return "";
            }
            if (key == "cwe_id" && sw1 == true) {
              //console.log(key)
              return "";
            } else if (attributes.includes(key) && sw2 == true) {
              return "";
            } else if (miscellaneous.includes(key) && sw3 == true) {
              return "";
            } else {
              return "inactive";
            }
          }
        });
    }
  });
});
